
lab5_48.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000005f4  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  0080010a  0080010a  00000692  2**0
                  ALLOC
  3 .stab         00001860  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001225  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000021  00000000  00000000  00003119  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000313c  2**2
                  CONTENTS, READONLY
  7 .avr.prop     00000016  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  0000318e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001d  00000000  00000000  00003d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000209  00000000  00000000  00003d41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__vector_24>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ef       	ldi	r30, 0xF4	; 244
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 36       	cpi	r26, 0x66	; 102
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	a4 d1       	rcall	.+840    	; 0x3b0 <main>
  68:	c3 c2       	rjmp	.+1414   	; 0x5f0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <lm73_read>:
//                            lm73_read                                  
// Read the LM73 from the mega128 board using TWI.
//*******************************************************************************
void lm73_read(){

    twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes) 
  6c:	42 e0       	ldi	r20, 0x02	; 2
  6e:	64 e6       	ldi	r22, 0x64	; 100
  70:	71 e0       	ldi	r23, 0x01	; 1
  72:	80 e9       	ldi	r24, 0x90	; 144
  74:	83 d1       	rcall	.+774    	; 0x37c <twi_start_rd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	8f e9       	ldi	r24, 0x9F	; 159
  78:	9f e0       	ldi	r25, 0x0F	; 15
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <lm73_read+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <lm73_read+0x14>
  80:	00 00       	nop
    lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
    lm73_temp = lm73_temp << 8; //shift it into upper byte 
    lm73_temp |= lm73_rd_buf[1];//"OR" in the low temp byte to lm73_temp 
    
    //Left shift register to get accurate temp reading
    lm73_temp = lm73_temp >> 2;
  82:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <lm73_rd_buf>
  86:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <lm73_rd_buf+0x1>
  8a:	76 27       	eor	r23, r22
  8c:	67 27       	eor	r22, r23
  8e:	76 27       	eor	r23, r22
  90:	76 95       	lsr	r23
  92:	67 95       	ror	r22
  94:	76 95       	lsr	r23
  96:	67 95       	ror	r22
    //multiply by .03125 to get temperature in celsius
    lm73_temp = lm73_temp * (.03125);    
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	b8 d1       	rcall	.+880    	; 0x40e <__floatunsisf>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	5d e3       	ldi	r21, 0x3D	; 61
  a6:	19 d2       	rcall	.+1074   	; 0x4da <__mulsf3>
  a8:	86 d1       	rcall	.+780    	; 0x3b6 <__fixunssfsi>
  aa:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <lm73_temp+0x1>
  ae:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <lm73_temp>
    temp_conversion(lm73_temp, celsius_mode); 
    itoa(lm73_temp, lcd_string_array, 10); //convert to string in array with itoa() from avr-libc                               
    string2lcd(lcd_string_array); //send the string to LCD (lcd_functions)
    TWCR = (1<<TWINT) | (1<<TWSTO);
*/
}
  b2:	08 95       	ret

000000b4 <__vector_18>:
//*******************************************************************************
//***********************************************************************************
//                            ISR(USART_RX_vect)                                  
// Interrupts CPU whenever a byte is recieved from mega128
//*******************************************************************************
ISR(USART_RX_vect){                                  
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
        lm73_read();
  d6:	ca df       	rcall	.-108    	; 0x6c <lm73_read>
        uart_puts("big anus");
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	1c d0       	rcall	.+56     	; 0x116 <uart_puts>
}
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	bf 91       	pop	r27
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	7f 91       	pop	r23
  ec:	6f 91       	pop	r22
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 100:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 104:	95 ff       	sbrs	r25, 5
 106:	fc cf       	rjmp	.-8      	; 0x100 <uart_putc>
    UDR0 = data;    // Send data byte
 108:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 10c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 110:	85 ff       	sbrs	r24, 5
 112:	fc cf       	rjmp	.-8      	; 0x10c <uart_putc+0xc>
}
 114:	08 95       	ret

00000116 <uart_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 116:	fc 01       	movw	r30, r24
 118:	20 81       	ld	r18, Z
 11a:	22 23       	and	r18, r18
 11c:	71 f0       	breq	.+28     	; 0x13a <uart_puts+0x24>
 11e:	31 96       	adiw	r30, 0x01	; 1
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 120:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 124:	95 ff       	sbrs	r25, 5
 126:	fc cf       	rjmp	.-8      	; 0x120 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 128:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 12c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 130:	95 ff       	sbrs	r25, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <uart_puts+0x16>
    while(str[i] != '\0') { 
 134:	21 91       	ld	r18, Z+
 136:	21 11       	cpse	r18, r1
 138:	f3 cf       	rjmp	.-26     	; 0x120 <uart_puts+0xa>
        uart_putc(str[i]);
        i++;
    }
}
 13a:	08 95       	ret

0000013c <uart_puts_p>:

//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
 13c:	9c 01       	movw	r18, r24
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 13e:	c9 01       	movw	r24, r18
 140:	f9 01       	movw	r30, r18
 142:	44 91       	lpm	r20, Z
 144:	44 23       	and	r20, r20
 146:	99 f0       	breq	.+38     	; 0x16e <uart_puts_p+0x32>
        uart_putc(pgm_read_byte(str++));
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	fc 01       	movw	r30, r24
 14e:	84 91       	lpm	r24, Z
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 150:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 154:	95 ff       	sbrs	r25, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <uart_puts_p+0x14>
    UDR0 = data;    // Send data byte
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 15c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 160:	95 ff       	sbrs	r25, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <uart_puts_p+0x20>
    while(pgm_read_byte(str) != 0x00) { 
 164:	c9 01       	movw	r24, r18
 166:	f9 01       	movw	r30, r18
 168:	44 91       	lpm	r20, Z
 16a:	41 11       	cpse	r20, r1
 16c:	ed cf       	rjmp	.-38     	; 0x148 <uart_puts_p+0xc>
    }
}
 16e:	08 95       	ret

00000170 <uart_init>:
//TXD is PORT D bit 1

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED
 170:	e1 ec       	ldi	r30, 0xC1	; 193
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 17a:	e2 ec       	ldi	r30, 0xC2	; 194
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	86 60       	ori	r24, 0x06	; 6
 182:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 184:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 188:	83 e3       	ldi	r24, 0x33	; 51
 18a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>

}
 18e:	08 95       	ret

00000190 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	9e e3       	ldi	r25, 0x3E	; 62
 194:	02 c0       	rjmp	.+4      	; 0x19a <uart_getc+0xa>
 196:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 198:	39 f0       	breq	.+14     	; 0x1a8 <uart_getc+0x18>
  while (!(UCSR0A & (1<<RXC0))) {
 19a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 19e:	27 ff       	sbrs	r18, 7
 1a0:	fa cf       	rjmp	.-12     	; 0x196 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 1a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 1a6:	08 95       	ret
  if(timer >= 16000){ return(0);}
 1a8:	80 e0       	ldi	r24, 0x00	; 0
}
 1aa:	08 95       	ret

000001ac <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 1c0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 1c4:	e8 50       	subi	r30, 0x08	; 8
 1c6:	e1 35       	cpi	r30, 0x51	; 81
 1c8:	88 f0       	brcs	.+34     	; 0x1ec <__vector_24+0x40>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 1ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 1ce:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  }//switch
}//TWI_isr
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti
  switch (TWSR) {
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	e6 50       	subi	r30, 0x06	; 6
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	09 94       	ijmp
 1f4:	60 c0       	rjmp	.+192    	; 0x2b6 <__vector_24+0x10a>
 1f6:	e9 cf       	rjmp	.-46     	; 0x1ca <__vector_24+0x1e>
 1f8:	e8 cf       	rjmp	.-48     	; 0x1ca <__vector_24+0x1e>
 1fa:	e7 cf       	rjmp	.-50     	; 0x1ca <__vector_24+0x1e>
 1fc:	e6 cf       	rjmp	.-52     	; 0x1ca <__vector_24+0x1e>
 1fe:	e5 cf       	rjmp	.-54     	; 0x1ca <__vector_24+0x1e>
 200:	e4 cf       	rjmp	.-56     	; 0x1ca <__vector_24+0x1e>
 202:	e3 cf       	rjmp	.-58     	; 0x1ca <__vector_24+0x1e>
 204:	58 c0       	rjmp	.+176    	; 0x2b6 <__vector_24+0x10a>
 206:	e1 cf       	rjmp	.-62     	; 0x1ca <__vector_24+0x1e>
 208:	e0 cf       	rjmp	.-64     	; 0x1ca <__vector_24+0x1e>
 20a:	df cf       	rjmp	.-66     	; 0x1ca <__vector_24+0x1e>
 20c:	de cf       	rjmp	.-68     	; 0x1ca <__vector_24+0x1e>
 20e:	dd cf       	rjmp	.-70     	; 0x1ca <__vector_24+0x1e>
 210:	dc cf       	rjmp	.-72     	; 0x1ca <__vector_24+0x1e>
 212:	db cf       	rjmp	.-74     	; 0x1ca <__vector_24+0x1e>
 214:	5a c0       	rjmp	.+180    	; 0x2ca <__vector_24+0x11e>
 216:	d9 cf       	rjmp	.-78     	; 0x1ca <__vector_24+0x1e>
 218:	d8 cf       	rjmp	.-80     	; 0x1ca <__vector_24+0x1e>
 21a:	d7 cf       	rjmp	.-82     	; 0x1ca <__vector_24+0x1e>
 21c:	d6 cf       	rjmp	.-84     	; 0x1ca <__vector_24+0x1e>
 21e:	d5 cf       	rjmp	.-86     	; 0x1ca <__vector_24+0x1e>
 220:	d4 cf       	rjmp	.-88     	; 0x1ca <__vector_24+0x1e>
 222:	d3 cf       	rjmp	.-90     	; 0x1ca <__vector_24+0x1e>
 224:	d2 cf       	rjmp	.-92     	; 0x1ca <__vector_24+0x1e>
 226:	d1 cf       	rjmp	.-94     	; 0x1ca <__vector_24+0x1e>
 228:	d0 cf       	rjmp	.-96     	; 0x1ca <__vector_24+0x1e>
 22a:	cf cf       	rjmp	.-98     	; 0x1ca <__vector_24+0x1e>
 22c:	ce cf       	rjmp	.-100    	; 0x1ca <__vector_24+0x1e>
 22e:	cd cf       	rjmp	.-102    	; 0x1ca <__vector_24+0x1e>
 230:	cc cf       	rjmp	.-104    	; 0x1ca <__vector_24+0x1e>
 232:	cb cf       	rjmp	.-106    	; 0x1ca <__vector_24+0x1e>
 234:	4a c0       	rjmp	.+148    	; 0x2ca <__vector_24+0x11e>
 236:	c9 cf       	rjmp	.-110    	; 0x1ca <__vector_24+0x1e>
 238:	c8 cf       	rjmp	.-112    	; 0x1ca <__vector_24+0x1e>
 23a:	c7 cf       	rjmp	.-114    	; 0x1ca <__vector_24+0x1e>
 23c:	c6 cf       	rjmp	.-116    	; 0x1ca <__vector_24+0x1e>
 23e:	c5 cf       	rjmp	.-118    	; 0x1ca <__vector_24+0x1e>
 240:	c4 cf       	rjmp	.-120    	; 0x1ca <__vector_24+0x1e>
 242:	c3 cf       	rjmp	.-122    	; 0x1ca <__vector_24+0x1e>
 244:	c2 cf       	rjmp	.-124    	; 0x1ca <__vector_24+0x1e>
 246:	c1 cf       	rjmp	.-126    	; 0x1ca <__vector_24+0x1e>
 248:	c0 cf       	rjmp	.-128    	; 0x1ca <__vector_24+0x1e>
 24a:	bf cf       	rjmp	.-130    	; 0x1ca <__vector_24+0x1e>
 24c:	be cf       	rjmp	.-132    	; 0x1ca <__vector_24+0x1e>
 24e:	bd cf       	rjmp	.-134    	; 0x1ca <__vector_24+0x1e>
 250:	bc cf       	rjmp	.-136    	; 0x1ca <__vector_24+0x1e>
 252:	bb cf       	rjmp	.-138    	; 0x1ca <__vector_24+0x1e>
 254:	52 c0       	rjmp	.+164    	; 0x2fa <__vector_24+0x14e>
 256:	b9 cf       	rjmp	.-142    	; 0x1ca <__vector_24+0x1e>
 258:	b8 cf       	rjmp	.-144    	; 0x1ca <__vector_24+0x1e>
 25a:	b7 cf       	rjmp	.-146    	; 0x1ca <__vector_24+0x1e>
 25c:	b6 cf       	rjmp	.-148    	; 0x1ca <__vector_24+0x1e>
 25e:	b5 cf       	rjmp	.-150    	; 0x1ca <__vector_24+0x1e>
 260:	b4 cf       	rjmp	.-152    	; 0x1ca <__vector_24+0x1e>
 262:	b3 cf       	rjmp	.-154    	; 0x1ca <__vector_24+0x1e>
 264:	4e c0       	rjmp	.+156    	; 0x302 <__stack+0x3>
 266:	b1 cf       	rjmp	.-158    	; 0x1ca <__vector_24+0x1e>
 268:	b0 cf       	rjmp	.-160    	; 0x1ca <__vector_24+0x1e>
 26a:	af cf       	rjmp	.-162    	; 0x1ca <__vector_24+0x1e>
 26c:	ae cf       	rjmp	.-164    	; 0x1ca <__vector_24+0x1e>
 26e:	ad cf       	rjmp	.-166    	; 0x1ca <__vector_24+0x1e>
 270:	ac cf       	rjmp	.-168    	; 0x1ca <__vector_24+0x1e>
 272:	ab cf       	rjmp	.-170    	; 0x1ca <__vector_24+0x1e>
 274:	aa cf       	rjmp	.-172    	; 0x1ca <__vector_24+0x1e>
 276:	a9 cf       	rjmp	.-174    	; 0x1ca <__vector_24+0x1e>
 278:	a8 cf       	rjmp	.-176    	; 0x1ca <__vector_24+0x1e>
 27a:	a7 cf       	rjmp	.-178    	; 0x1ca <__vector_24+0x1e>
 27c:	a6 cf       	rjmp	.-180    	; 0x1ca <__vector_24+0x1e>
 27e:	a5 cf       	rjmp	.-182    	; 0x1ca <__vector_24+0x1e>
 280:	a4 cf       	rjmp	.-184    	; 0x1ca <__vector_24+0x1e>
 282:	a3 cf       	rjmp	.-186    	; 0x1ca <__vector_24+0x1e>
 284:	4b c0       	rjmp	.+150    	; 0x31c <__stack+0x1d>
 286:	a1 cf       	rjmp	.-190    	; 0x1ca <__vector_24+0x1e>
 288:	a0 cf       	rjmp	.-192    	; 0x1ca <__vector_24+0x1e>
 28a:	9f cf       	rjmp	.-194    	; 0x1ca <__vector_24+0x1e>
 28c:	9e cf       	rjmp	.-196    	; 0x1ca <__vector_24+0x1e>
 28e:	9d cf       	rjmp	.-198    	; 0x1ca <__vector_24+0x1e>
 290:	9c cf       	rjmp	.-200    	; 0x1ca <__vector_24+0x1e>
 292:	9b cf       	rjmp	.-202    	; 0x1ca <__vector_24+0x1e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <__vector_24+0xea>
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 296:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 29a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <twi_buf>
 29e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <twi_buf+0x1>
 2a2:	e8 0f       	add	r30, r24
 2a4:	f9 2f       	mov	r31, r25
 2a6:	f1 1d       	adc	r31, r1
 2a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
 2ac:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 2ae:	84 e9       	ldi	r24, 0x94	; 148
 2b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
      break;      
 2b4:	91 cf       	rjmp	.-222    	; 0x1d8 <__vector_24+0x2c>
      TWDR = twi_bus_addr;  //load up the twi bus address
 2b6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <twi_bus_addr>
 2ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
      twi_buf_ptr = 0;      //initalize buffer pointer 
 2be:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
      TWCR = TWCR_SEND;     //send SLA+RW
 2c2:	85 e8       	ldi	r24, 0x85	; 133
 2c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
      break;
 2c8:	87 cf       	rjmp	.-242    	; 0x1d8 <__vector_24+0x2c>
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 2ca:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 2ce:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <twi_msg_size>
 2d2:	e8 17       	cp	r30, r24
 2d4:	60 f7       	brcc	.-40     	; 0x2ae <__vector_24+0x102>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 2d6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <twi_buf>
 2da:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <twi_buf+0x1>
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	2e 0f       	add	r18, r30
 2e2:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
 2e6:	e8 0f       	add	r30, r24
 2e8:	f9 2f       	mov	r31, r25
 2ea:	f1 1d       	adc	r31, r1
 2ec:	80 81       	ld	r24, Z
 2ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
        TWCR = TWCR_SEND;               //send next byte 
 2f2:	85 e8       	ldi	r24, 0x85	; 133
 2f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
 2f8:	6f cf       	rjmp	.-290    	; 0x1d8 <__vector_24+0x2c>
      TWCR = TWCR_START;                //initiate RESTART 
 2fa:	85 ea       	ldi	r24, 0xA5	; 165
 2fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
      break;
 300:	6b cf       	rjmp	.-298    	; 0x1d8 <__vector_24+0x2c>
 302:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 306:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <twi_msg_size>
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	99 0b       	sbc	r25, r25
 30e:	28 17       	cp	r18, r24
 310:	19 06       	cpc	r1, r25
 312:	dc f4       	brge	.+54     	; 0x34a <__stack+0x4b>
 314:	85 ec       	ldi	r24, 0xC5	; 197
 316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
 31a:	5e cf       	rjmp	.-324    	; 0x1d8 <__vector_24+0x2c>
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 31c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <twi_buf>
 320:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <twi_buf+0x1>
 324:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	2e 0f       	add	r18, r30
 32c:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
 330:	e8 0f       	add	r30, r24
 332:	f9 2f       	mov	r31, r25
 334:	f1 1d       	adc	r31, r1
 336:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
 33a:	80 83       	st	Z, r24
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 33c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <twi_msg_size>
 340:	81 50       	subi	r24, 0x01	; 1
 342:	99 0b       	sbc	r25, r25
 344:	28 17       	cp	r18, r24
 346:	19 06       	cpc	r1, r25
 348:	2c f3       	brlt	.-54     	; 0x314 <__stack+0x15>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 34a:	85 e8       	ldi	r24, 0x85	; 133
 34c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
 350:	43 cf       	rjmp	.-378    	; 0x1d8 <__vector_24+0x2c>

00000352 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 352:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
}
 356:	81 70       	andi	r24, 0x01	; 1
 358:	08 95       	ret

0000035a <twi_start_wr>:
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 35a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 35e:	90 fd       	sbrc	r25, 0
 360:	fc cf       	rjmp	.-8      	; 0x35a <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 362:	8e 7f       	andi	r24, 0xFE	; 254
 364:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
 368:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <twi_buf+0x1>
 36c:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
 370:	40 93 61 01 	sts	0x0161, r20	; 0x800161 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
 374:	85 ea       	ldi	r24, 0xA5	; 165
 376:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
}
 37a:	08 95       	ret

0000037c <twi_start_rd>:
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 37c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 380:	90 fd       	sbrc	r25, 0
 382:	fc cf       	rjmp	.-8      	; 0x37c <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 384:	81 60       	ori	r24, 0x01	; 1
 386:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
 38a:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <twi_buf+0x1>
 38e:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
 392:	40 93 61 01 	sts	0x0161, r20	; 0x800161 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
 396:	85 ea       	ldi	r24, 0xA5	; 165
 398:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
}
 39c:	08 95       	ret

0000039e <init_twi>:
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
 3a4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__EEPROM_REGION_LENGTH__+0x7f00b8>
 3ae:	08 95       	ret

000003b0 <main>:
 3b0:	df de       	rcall	.-578    	; 0x170 <uart_init>
 3b2:	f5 df       	rcall	.-22     	; 0x39e <init_twi>
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <main+0x4>

000003b6 <__fixunssfsi>:
 3b6:	70 d0       	rcall	.+224    	; 0x498 <__fp_splitA>
 3b8:	88 f0       	brcs	.+34     	; 0x3dc <__fixunssfsi+0x26>
 3ba:	9f 57       	subi	r25, 0x7F	; 127
 3bc:	90 f0       	brcs	.+36     	; 0x3e2 <__fixunssfsi+0x2c>
 3be:	b9 2f       	mov	r27, r25
 3c0:	99 27       	eor	r25, r25
 3c2:	b7 51       	subi	r27, 0x17	; 23
 3c4:	a0 f0       	brcs	.+40     	; 0x3ee <__fixunssfsi+0x38>
 3c6:	d1 f0       	breq	.+52     	; 0x3fc <__fixunssfsi+0x46>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	1a f0       	brmi	.+6      	; 0x3d8 <__fixunssfsi+0x22>
 3d2:	ba 95       	dec	r27
 3d4:	c9 f7       	brne	.-14     	; 0x3c8 <__fixunssfsi+0x12>
 3d6:	12 c0       	rjmp	.+36     	; 0x3fc <__fixunssfsi+0x46>
 3d8:	b1 30       	cpi	r27, 0x01	; 1
 3da:	81 f0       	breq	.+32     	; 0x3fc <__fixunssfsi+0x46>
 3dc:	77 d0       	rcall	.+238    	; 0x4cc <__fp_zero>
 3de:	b1 e0       	ldi	r27, 0x01	; 1
 3e0:	08 95       	ret
 3e2:	74 c0       	rjmp	.+232    	; 0x4cc <__fp_zero>
 3e4:	67 2f       	mov	r22, r23
 3e6:	78 2f       	mov	r23, r24
 3e8:	88 27       	eor	r24, r24
 3ea:	b8 5f       	subi	r27, 0xF8	; 248
 3ec:	39 f0       	breq	.+14     	; 0x3fc <__fixunssfsi+0x46>
 3ee:	b9 3f       	cpi	r27, 0xF9	; 249
 3f0:	cc f3       	brlt	.-14     	; 0x3e4 <__fixunssfsi+0x2e>
 3f2:	86 95       	lsr	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	b3 95       	inc	r27
 3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__fixunssfsi+0x3c>
 3fc:	3e f4       	brtc	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	90 95       	com	r25
 400:	80 95       	com	r24
 402:	70 95       	com	r23
 404:	61 95       	neg	r22
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	8f 4f       	sbci	r24, 0xFF	; 255
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	08 95       	ret

0000040e <__floatunsisf>:
 40e:	e8 94       	clt
 410:	09 c0       	rjmp	.+18     	; 0x424 <__floatsisf+0x12>

00000412 <__floatsisf>:
 412:	97 fb       	bst	r25, 7
 414:	3e f4       	brtc	.+14     	; 0x424 <__floatsisf+0x12>
 416:	90 95       	com	r25
 418:	80 95       	com	r24
 41a:	70 95       	com	r23
 41c:	61 95       	neg	r22
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	99 23       	and	r25, r25
 426:	a9 f0       	breq	.+42     	; 0x452 <__floatsisf+0x40>
 428:	f9 2f       	mov	r31, r25
 42a:	96 e9       	ldi	r25, 0x96	; 150
 42c:	bb 27       	eor	r27, r27
 42e:	93 95       	inc	r25
 430:	f6 95       	lsr	r31
 432:	87 95       	ror	r24
 434:	77 95       	ror	r23
 436:	67 95       	ror	r22
 438:	b7 95       	ror	r27
 43a:	f1 11       	cpse	r31, r1
 43c:	f8 cf       	rjmp	.-16     	; 0x42e <__floatsisf+0x1c>
 43e:	fa f4       	brpl	.+62     	; 0x47e <__floatsisf+0x6c>
 440:	bb 0f       	add	r27, r27
 442:	11 f4       	brne	.+4      	; 0x448 <__floatsisf+0x36>
 444:	60 ff       	sbrs	r22, 0
 446:	1b c0       	rjmp	.+54     	; 0x47e <__floatsisf+0x6c>
 448:	6f 5f       	subi	r22, 0xFF	; 255
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	8f 4f       	sbci	r24, 0xFF	; 255
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	16 c0       	rjmp	.+44     	; 0x47e <__floatsisf+0x6c>
 452:	88 23       	and	r24, r24
 454:	11 f0       	breq	.+4      	; 0x45a <__floatsisf+0x48>
 456:	96 e9       	ldi	r25, 0x96	; 150
 458:	11 c0       	rjmp	.+34     	; 0x47c <__floatsisf+0x6a>
 45a:	77 23       	and	r23, r23
 45c:	21 f0       	breq	.+8      	; 0x466 <__floatsisf+0x54>
 45e:	9e e8       	ldi	r25, 0x8E	; 142
 460:	87 2f       	mov	r24, r23
 462:	76 2f       	mov	r23, r22
 464:	05 c0       	rjmp	.+10     	; 0x470 <__floatsisf+0x5e>
 466:	66 23       	and	r22, r22
 468:	71 f0       	breq	.+28     	; 0x486 <__floatsisf+0x74>
 46a:	96 e8       	ldi	r25, 0x86	; 134
 46c:	86 2f       	mov	r24, r22
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	2a f0       	brmi	.+10     	; 0x47e <__floatsisf+0x6c>
 474:	9a 95       	dec	r25
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	da f7       	brpl	.-10     	; 0x474 <__floatsisf+0x62>
 47e:	88 0f       	add	r24, r24
 480:	96 95       	lsr	r25
 482:	87 95       	ror	r24
 484:	97 f9       	bld	r25, 7
 486:	08 95       	ret

00000488 <__fp_split3>:
 488:	57 fd       	sbrc	r21, 7
 48a:	90 58       	subi	r25, 0x80	; 128
 48c:	44 0f       	add	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	59 f0       	breq	.+22     	; 0x4a8 <__fp_splitA+0x10>
 492:	5f 3f       	cpi	r21, 0xFF	; 255
 494:	71 f0       	breq	.+28     	; 0x4b2 <__fp_splitA+0x1a>
 496:	47 95       	ror	r20

00000498 <__fp_splitA>:
 498:	88 0f       	add	r24, r24
 49a:	97 fb       	bst	r25, 7
 49c:	99 1f       	adc	r25, r25
 49e:	61 f0       	breq	.+24     	; 0x4b8 <__fp_splitA+0x20>
 4a0:	9f 3f       	cpi	r25, 0xFF	; 255
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <__fp_splitA+0x2a>
 4a4:	87 95       	ror	r24
 4a6:	08 95       	ret
 4a8:	12 16       	cp	r1, r18
 4aa:	13 06       	cpc	r1, r19
 4ac:	14 06       	cpc	r1, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	f2 cf       	rjmp	.-28     	; 0x496 <__fp_split3+0xe>
 4b2:	46 95       	lsr	r20
 4b4:	f1 df       	rcall	.-30     	; 0x498 <__fp_splitA>
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__fp_splitA+0x30>
 4b8:	16 16       	cp	r1, r22
 4ba:	17 06       	cpc	r1, r23
 4bc:	18 06       	cpc	r1, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	f1 cf       	rjmp	.-30     	; 0x4a4 <__fp_splitA+0xc>
 4c2:	86 95       	lsr	r24
 4c4:	71 05       	cpc	r23, r1
 4c6:	61 05       	cpc	r22, r1
 4c8:	08 94       	sec
 4ca:	08 95       	ret

000004cc <__fp_zero>:
 4cc:	e8 94       	clt

000004ce <__fp_szero>:
 4ce:	bb 27       	eor	r27, r27
 4d0:	66 27       	eor	r22, r22
 4d2:	77 27       	eor	r23, r23
 4d4:	cb 01       	movw	r24, r22
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <__mulsf3>:
 4da:	0b d0       	rcall	.+22     	; 0x4f2 <__mulsf3x>
 4dc:	78 c0       	rjmp	.+240    	; 0x5ce <__fp_round>
 4de:	69 d0       	rcall	.+210    	; 0x5b2 <__fp_pscA>
 4e0:	28 f0       	brcs	.+10     	; 0x4ec <__mulsf3+0x12>
 4e2:	6e d0       	rcall	.+220    	; 0x5c0 <__fp_pscB>
 4e4:	18 f0       	brcs	.+6      	; 0x4ec <__mulsf3+0x12>
 4e6:	95 23       	and	r25, r21
 4e8:	09 f0       	breq	.+2      	; 0x4ec <__mulsf3+0x12>
 4ea:	5a c0       	rjmp	.+180    	; 0x5a0 <__fp_inf>
 4ec:	5f c0       	rjmp	.+190    	; 0x5ac <__fp_nan>
 4ee:	11 24       	eor	r1, r1
 4f0:	ee cf       	rjmp	.-36     	; 0x4ce <__fp_szero>

000004f2 <__mulsf3x>:
 4f2:	ca df       	rcall	.-108    	; 0x488 <__fp_split3>
 4f4:	a0 f3       	brcs	.-24     	; 0x4de <__mulsf3+0x4>

000004f6 <__mulsf3_pse>:
 4f6:	95 9f       	mul	r25, r21
 4f8:	d1 f3       	breq	.-12     	; 0x4ee <__mulsf3+0x14>
 4fa:	95 0f       	add	r25, r21
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	55 1f       	adc	r21, r21
 500:	62 9f       	mul	r22, r18
 502:	f0 01       	movw	r30, r0
 504:	72 9f       	mul	r23, r18
 506:	bb 27       	eor	r27, r27
 508:	f0 0d       	add	r31, r0
 50a:	b1 1d       	adc	r27, r1
 50c:	63 9f       	mul	r22, r19
 50e:	aa 27       	eor	r26, r26
 510:	f0 0d       	add	r31, r0
 512:	b1 1d       	adc	r27, r1
 514:	aa 1f       	adc	r26, r26
 516:	64 9f       	mul	r22, r20
 518:	66 27       	eor	r22, r22
 51a:	b0 0d       	add	r27, r0
 51c:	a1 1d       	adc	r26, r1
 51e:	66 1f       	adc	r22, r22
 520:	82 9f       	mul	r24, r18
 522:	22 27       	eor	r18, r18
 524:	b0 0d       	add	r27, r0
 526:	a1 1d       	adc	r26, r1
 528:	62 1f       	adc	r22, r18
 52a:	73 9f       	mul	r23, r19
 52c:	b0 0d       	add	r27, r0
 52e:	a1 1d       	adc	r26, r1
 530:	62 1f       	adc	r22, r18
 532:	83 9f       	mul	r24, r19
 534:	a0 0d       	add	r26, r0
 536:	61 1d       	adc	r22, r1
 538:	22 1f       	adc	r18, r18
 53a:	74 9f       	mul	r23, r20
 53c:	33 27       	eor	r19, r19
 53e:	a0 0d       	add	r26, r0
 540:	61 1d       	adc	r22, r1
 542:	23 1f       	adc	r18, r19
 544:	84 9f       	mul	r24, r20
 546:	60 0d       	add	r22, r0
 548:	21 1d       	adc	r18, r1
 54a:	82 2f       	mov	r24, r18
 54c:	76 2f       	mov	r23, r22
 54e:	6a 2f       	mov	r22, r26
 550:	11 24       	eor	r1, r1
 552:	9f 57       	subi	r25, 0x7F	; 127
 554:	50 40       	sbci	r21, 0x00	; 0
 556:	8a f0       	brmi	.+34     	; 0x57a <__mulsf3_pse+0x84>
 558:	e1 f0       	breq	.+56     	; 0x592 <__mulsf3_pse+0x9c>
 55a:	88 23       	and	r24, r24
 55c:	4a f0       	brmi	.+18     	; 0x570 <__mulsf3_pse+0x7a>
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	bb 1f       	adc	r27, r27
 564:	66 1f       	adc	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	91 50       	subi	r25, 0x01	; 1
 56c:	50 40       	sbci	r21, 0x00	; 0
 56e:	a9 f7       	brne	.-22     	; 0x55a <__mulsf3_pse+0x64>
 570:	9e 3f       	cpi	r25, 0xFE	; 254
 572:	51 05       	cpc	r21, r1
 574:	70 f0       	brcs	.+28     	; 0x592 <__mulsf3_pse+0x9c>
 576:	14 c0       	rjmp	.+40     	; 0x5a0 <__fp_inf>
 578:	aa cf       	rjmp	.-172    	; 0x4ce <__fp_szero>
 57a:	5f 3f       	cpi	r21, 0xFF	; 255
 57c:	ec f3       	brlt	.-6      	; 0x578 <__mulsf3_pse+0x82>
 57e:	98 3e       	cpi	r25, 0xE8	; 232
 580:	dc f3       	brlt	.-10     	; 0x578 <__mulsf3_pse+0x82>
 582:	86 95       	lsr	r24
 584:	77 95       	ror	r23
 586:	67 95       	ror	r22
 588:	b7 95       	ror	r27
 58a:	f7 95       	ror	r31
 58c:	e7 95       	ror	r30
 58e:	9f 5f       	subi	r25, 0xFF	; 255
 590:	c1 f7       	brne	.-16     	; 0x582 <__mulsf3_pse+0x8c>
 592:	fe 2b       	or	r31, r30
 594:	88 0f       	add	r24, r24
 596:	91 1d       	adc	r25, r1
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret

000005a0 <__fp_inf>:
 5a0:	97 f9       	bld	r25, 7
 5a2:	9f 67       	ori	r25, 0x7F	; 127
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	08 95       	ret

000005ac <__fp_nan>:
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	80 ec       	ldi	r24, 0xC0	; 192
 5b0:	08 95       	ret

000005b2 <__fp_pscA>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	09 06       	cpc	r0, r25
 5be:	08 95       	ret

000005c0 <__fp_pscB>:
 5c0:	00 24       	eor	r0, r0
 5c2:	0a 94       	dec	r0
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	14 06       	cpc	r1, r20
 5ca:	05 06       	cpc	r0, r21
 5cc:	08 95       	ret

000005ce <__fp_round>:
 5ce:	09 2e       	mov	r0, r25
 5d0:	03 94       	inc	r0
 5d2:	00 0c       	add	r0, r0
 5d4:	11 f4       	brne	.+4      	; 0x5da <__fp_round+0xc>
 5d6:	88 23       	and	r24, r24
 5d8:	52 f0       	brmi	.+20     	; 0x5ee <__fp_round+0x20>
 5da:	bb 0f       	add	r27, r27
 5dc:	40 f4       	brcc	.+16     	; 0x5ee <__fp_round+0x20>
 5de:	bf 2b       	or	r27, r31
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_round+0x18>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <__fp_round+0x20>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
