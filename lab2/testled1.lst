
testled1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000690  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ced  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000021  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00002411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:

#include <avr/io.h>

int main()
{
DDRA  = 0xFF;   //set port A to all outputs
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
DDRB  = 0xF0;   //set port bits 4-7 B as outputs
  a8:	90 ef       	ldi	r25, 0xF0	; 240
  aa:	97 bb       	out	0x17, r25	; 23
DDRD  = 0x00;   //set port D all inputs 
  ac:	11 ba       	out	0x11, r1	; 17
PORTD = 0xFF;   //set port D all pullups 
  ae:	82 bb       	out	0x12, r24	; 18
PORTA = 0xFF;   //set port A to all ones  (off, active low)
  b0:	8b bb       	out	0x1b, r24	; 27

int i = 0;
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0

while(1){
    if (i==0) PORTB = 0x00;
    if (i==1) PORTB = 0x10;
    if (i==2) PORTB = 0x20;
    if (i==3) PORTB = 0x30;
  b6:	60 e3       	ldi	r22, 0x30	; 48
    if (i==4) PORTB = 0x40;
  b8:	50 e4       	ldi	r21, 0x40	; 64
    if (i==2) PORTB = 0x20;
  ba:	40 e2       	ldi	r20, 0x20	; 32
    if (i==1) PORTB = 0x10;
  bc:	30 e1       	ldi	r19, 0x10	; 16
  be:	07 c0       	rjmp	.+14     	; 0xce <main+0x2a>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 05       	cpc	r25, r1
  c4:	91 f4       	brne	.+36     	; 0xea <main+0x46>
  c6:	38 bb       	out	0x18, r19	; 24

    i++;
  c8:	01 96       	adiw	r24, 0x01	; 1
  //PORTB = 0x10; //digit one   on 
  //PORTB = 0x20; //colon, indicator leds  on
  //PORTB = 0x30; //digit two   on 
  //PORTB = 0x40; //digit three on 

  PORTA = PIND; //push button determines which segment is on
  ca:	20 b3       	in	r18, 0x10	; 16
  cc:	2b bb       	out	0x1b, r18	; 27
    if (i==0) PORTB = 0x00;
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	b9 f7       	brne	.-18     	; 0xc0 <main+0x1c>
  d2:	18 ba       	out	0x18, r1	; 24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	f7 cf       	rjmp	.-18     	; 0xc8 <main+0x24>
    if (i==3) PORTB = 0x30;
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	91 05       	cpc	r25, r1
  de:	51 f4       	brne	.+20     	; 0xf4 <main+0x50>
  e0:	68 bb       	out	0x18, r22	; 24
  PORTA = PIND; //push button determines which segment is on
  e2:	80 b3       	in	r24, 0x10	; 16
  e4:	8b bb       	out	0x1b, r24	; 27
    i++;
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	90 e0       	ldi	r25, 0x00	; 0
    if (i==2) PORTB = 0x20;
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	91 05       	cpc	r25, r1
  ee:	a9 f7       	brne	.-22     	; 0xda <main+0x36>
  f0:	48 bb       	out	0x18, r20	; 24
  f2:	ea cf       	rjmp	.-44     	; 0xc8 <main+0x24>
    if (i==4) PORTB = 0x40;
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	39 f7       	brne	.-50     	; 0xc8 <main+0x24>
  fa:	58 bb       	out	0x18, r21	; 24
  PORTA = PIND; //push button determines which segment is on
  fc:	80 b3       	in	r24, 0x10	; 16
  fe:	8b bb       	out	0x1b, r24	; 27
    if (i==0) PORTB = 0x00;
 100:	18 ba       	out	0x18, r1	; 24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	e0 cf       	rjmp	.-64     	; 0xc8 <main+0x24>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
