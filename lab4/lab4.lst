
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000011ae  00001242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800144  00800144  00001286  2**0
                  ALLOC
  3 .stab         00003924  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016df  00000000  00000000  00004bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000021  00000000  00000000  0000628b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000062ac  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00007180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000719d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ea       	ldi	r30, 0xAE	; 174
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 38       	cpi	r26, 0x87	; 135
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <main>
      c6:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <timer0_init>:
// Initialize the timer to be used to count up 1 second and run off the external
// 32kHz oscillator.
//*******************************************************************************
void timer0_init(){
    //Initialization of timer 0 using ext. oscillator. Used to count seconds.
    TIMSK |= (1<<TOIE0);             //enable overflow interrupt
      ce:	87 b7       	in	r24, 0x37	; 55
      d0:	81 60       	ori	r24, 0x01	; 1
      d2:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= (1<<CS00) | (1<<CS02);  //normal mode, 128 prescale
      d4:	83 b7       	in	r24, 0x33	; 51
      d6:	85 60       	ori	r24, 0x05	; 5
      d8:	83 bf       	out	0x33, r24	; 51
    ASSR |= (1<<AS0);                //Use external oscillator
      da:	80 b7       	in	r24, 0x30	; 48
      dc:	88 60       	ori	r24, 0x08	; 8
      de:	80 bf       	out	0x30, r24	; 48
}
      e0:	08 95       	ret

000000e2 <timer1_init>:
// Oscillator used to make alarm sound. Sent out to PC0 to OP amp to eventually be
// audio output. Uses internal I/O clock with no prescale.
//*******************************************************************************
void timer1_init(){
//    TIMSK |= (1<<TOIE1);  //enable timer overflow and enable output compare A interrupts
    TCCR1A |= (1<<WGM11) | (1<<WGM10);  //Set to fast PWM, 64 prescale 
      e2:	8f b5       	in	r24, 0x2f	; 47
      e4:	83 60       	ori	r24, 0x03	; 3
      e6:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1<<WGM12) | (1<<CS10) | (1<<CS11);              
      e8:	8e b5       	in	r24, 0x2e	; 46
      ea:	8b 60       	ori	r24, 0x0B	; 11
      ec:	8e bd       	out	0x2e, r24	; 46
    TCCR1C = 0x00;                      //No force compare
      ee:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
      f2:	08 95       	ret

000000f4 <timer2_init>:
// Used in PWM mode to adjust brightness of display. Reads in ADCH to determine
// duty cycle of PB7.
//*******************************************************************************
void timer2_init(){
    //TIMSK |= (1<<OCIE2);             //output compare interrupt enabled
    TCCR2 |= (1<<WGM20) |(1<<WGM21) | (1<<CS20) | (1<<COM21);  //Set to fast PWM, 1024 prescale
      f4:	85 b5       	in	r24, 0x25	; 37
      f6:	89 66       	ori	r24, 0x69	; 105
      f8:	85 bd       	out	0x25, r24	; 37
}
      fa:	08 95       	ret

000000fc <timer3_init>:
// Controls volume of audio output. Connected to VOLUME pin on audio amplifier
// and varies a voltage on the pin to increase or decrease the volume.
//*******************************************************************************
void timer3_init(){
    //TIMSK |= (1<<TOIE1) | (1<<OCIE1A);  //enable timer overflow and enable output compare A interrupts
    TCCR3A |= (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31) | (1<<WGM30);  //Set to fast PWM, no prescale 
      fc:	eb e8       	ldi	r30, 0x8B	; 139
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	83 6c       	ori	r24, 0xC3	; 195
     104:	80 83       	st	Z, r24
    TCCR3B |= (1<<WGM32) | (1<<CS30);              
     106:	ea e8       	ldi	r30, 0x8A	; 138
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	89 60       	ori	r24, 0x09	; 9
     10e:	80 83       	st	Z, r24
    TCCR3C = 0x00;                      //No force compare
     110:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
    OCR3A = 9727; 
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	95 e2       	ldi	r25, 0x25	; 37
     118:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
}
     120:	08 95       	ret

00000122 <spi_init>:
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
//************************************************

void spi_init(){
    //DDRB  |= (1<<PB1) | (1<<PB2);     //Turn on SS, MOSI 
    DDRE  |= (1<<PE6);                //Set SH/LD_N low to load in data
     122:	16 9a       	sbi	0x02, 6	; 2
    DDRD  |= (1<<PD2);                //Turn on REGCLK
     124:	8a 9a       	sbi	0x11, 2	; 17
    SPCR  |= (1<<SPE) | (1<<MSTR);    //enable SPI, master mode 
     126:	8d b1       	in	r24, 0x0d	; 13
     128:	80 65       	ori	r24, 0x50	; 80
     12a:	8d b9       	out	0x0d, r24	; 13
    SPSR  |= (1<<SPI2X);              // double speed operation
     12c:	70 9a       	sbi	0x0e, 0	; 14

}//spi_init
     12e:	08 95       	ret

00000130 <adc_init>:
//                            adc_init()                                  
// Initialize the analog to digital converter so we receive input on PF0 to send to 
// TCNT0.
//*******************************************************************************
void adc_init(){
    ADMUX |= (1<<REFS1) | (1<<REFS0);   //Use the internal 2.56V as AREF and left adjust
     130:	87 b1       	in	r24, 0x07	; 7
     132:	80 6c       	ori	r24, 0xC0	; 192
     134:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS0) | (1<<ADPS0);   //Enable ADC and ADC interrupts
     136:	86 b1       	in	r24, 0x06	; 6
     138:	8d 6c       	ori	r24, 0xCD	; 205
     13a:	86 b9       	out	0x06, r24	; 6
                                                                //Start the conversion and prescale by 128                    
}
     13c:	08 95       	ret

0000013e <debounce_switch>:
// Checks the state of pushbutton S0 It shifts in ones till the button is pushed. 
// Function returns a 1 only once per debounced button push so a debounce and toggle 
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch(uint8_t button) {
     13e:	48 2f       	mov	r20, r24
    volatile static uint16_t state [4] = {0}; //holds present state
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
     140:	e8 2f       	mov	r30, r24
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	ee 0f       	add	r30, r30
     146:	ff 1f       	adc	r31, r31
     148:	e7 5b       	subi	r30, 0xB7	; 183
     14a:	fe 4f       	sbci	r31, 0xFE	; 254
     14c:	20 81       	ld	r18, Z
     14e:	31 81       	ldd	r19, Z+1	; 0x01
     150:	99 b3       	in	r25, 0x19	; 25
     152:	89 2f       	mov	r24, r25
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	02 c0       	rjmp	.+4      	; 0x15c <debounce_switch+0x1e>
     158:	95 95       	asr	r25
     15a:	87 95       	ror	r24
     15c:	4a 95       	dec	r20
     15e:	e2 f7       	brpl	.-8      	; 0x158 <debounce_switch+0x1a>
     160:	81 70       	andi	r24, 0x01	; 1
     162:	99 27       	eor	r25, r25
     164:	22 0f       	add	r18, r18
     166:	33 1f       	adc	r19, r19
     168:	30 6e       	ori	r19, 0xE0	; 224
     16a:	82 2b       	or	r24, r18
     16c:	93 2b       	or	r25, r19
     16e:	91 83       	std	Z+1, r25	; 0x01
     170:	80 83       	st	Z, r24
    if (state[button] == 0xF000) return 1;
     172:	20 81       	ld	r18, Z
     174:	31 81       	ldd	r19, Z+1	; 0x01
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	21 15       	cp	r18, r1
     17a:	30 4f       	sbci	r19, 0xF0	; 240
     17c:	09 f0       	breq	.+2      	; 0x180 <debounce_switch+0x42>
     17e:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
     180:	08 95       	ret

00000182 <dec_to_bcd>:
//******************************************************************************
//                            dec_2_bcd                                      
//Returns the hexadecimal value of a decimal value.
//Pass in the integer to be converted to hex and it returns the appropriate value in
//the array.
uint8_t dec_to_bcd(uint16_t num) {
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	2c 97       	sbiw	r28, 0x0c	; 12
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	f8 94       	cli
     190:	de bf       	out	0x3e, r29	; 62
     192:	0f be       	out	0x3f, r0	; 63
     194:	cd bf       	out	0x3d, r28	; 61
    uint8_t bcd_array[12] = {0b11000000, 0b11111001, 0b10100100, 0b10110000, 0b10011001, 0b10010010, 0b10000010, 0b11111000, 0b10000000, 0b10011000, 0b11111111, 0b11111100};
     196:	2c e0       	ldi	r18, 0x0C	; 12
     198:	e6 e0       	ldi	r30, 0x06	; 6
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	de 01       	movw	r26, r28
     19e:	11 96       	adiw	r26, 0x01	; 1
     1a0:	01 90       	ld	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	2a 95       	dec	r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <dec_to_bcd+0x1e>

    return bcd_array[num];
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	2c 0f       	add	r18, r28
     1ae:	3d 1f       	adc	r19, r29
     1b0:	82 0f       	add	r24, r18
     1b2:	93 1f       	adc	r25, r19
}
     1b4:	fc 01       	movw	r30, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	2c 96       	adiw	r28, 0x0c	; 12
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <blink_colon>:
    //Declare boolean to determine whether the colon is on
    
    //Check to see if the colon is on and either turn on segments
    //or blank segments.
    //Toggle colon_on before leaving function
    if (t->seconds % 2 == 0){
     1ca:	fc 01       	movw	r30, r24
     1cc:	80 81       	ld	r24, Z
     1ce:	80 ff       	sbrs	r24, 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <blink_colon+0x10>
        return segment_data[2] = 11;
    }
    else if (t->seconds % 2 == 1){
        return segment_data[2] = 10;
     1d2:	8a e0       	ldi	r24, 0x0A	; 10
     1d4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <segment_data+0x2>
    }
}
     1d8:	08 95       	ret
        return segment_data[2] = 11;
     1da:	8b e0       	ldi	r24, 0x0B	; 11
     1dc:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <segment_data+0x2>
     1e0:	08 95       	ret

000001e2 <display_sum>:
//                            display_sum                                  
// Takes the number of digits found in segsum and the array of data and outputs it
// onto the display.
// Does not return anything.
//*******************************************************************************
void display_sum() {
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2c 97       	sbiw	r28, 0x0c	; 12
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	27 e5       	ldi	r18, 0x57	; 87
     1f8:	31 e0       	ldi	r19, 0x01	; 1
    
    //Set digit_select to MSB
    int8_t digit_select = 0x40;
     1fa:	80 e4       	ldi	r24, 0x40	; 64
    
        //Select digit to turn on and send PORTA the BCD
        PORTB = digit_select;
        PORTA = dec_to_bcd(segment_data[i]);
        _delay_ms(1);
        PORTA = 0xFF;
     1fc:	5f ef       	ldi	r21, 0xFF	; 255
        PORTB = digit_select;
     1fe:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_bcd(segment_data[i]);
     200:	f9 01       	movw	r30, r18
     202:	92 91       	ld	r25, -Z
     204:	9f 01       	movw	r18, r30
    uint8_t bcd_array[12] = {0b11000000, 0b11111001, 0b10100100, 0b10110000, 0b10011001, 0b10010010, 0b10000010, 0b11111000, 0b10000000, 0b10011000, 0b11111111, 0b11111100};
     206:	4c e0       	ldi	r20, 0x0C	; 12
     208:	e6 e0       	ldi	r30, 0x06	; 6
     20a:	f1 e0       	ldi	r31, 0x01	; 1
     20c:	de 01       	movw	r26, r28
     20e:	11 96       	adiw	r26, 0x01	; 1
     210:	01 90       	ld	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	4a 95       	dec	r20
     216:	e1 f7       	brne	.-8      	; 0x210 <display_sum+0x2e>
    return bcd_array[num];
     218:	e1 e0       	ldi	r30, 0x01	; 1
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ec 0f       	add	r30, r28
     21e:	fd 1f       	adc	r31, r29
     220:	e9 0f       	add	r30, r25
     222:	f1 1d       	adc	r31, r1
     224:	90 81       	ld	r25, Z
        PORTA = dec_to_bcd(segment_data[i]);
     226:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	ef e9       	ldi	r30, 0x9F	; 159
     22a:	ff e0       	ldi	r31, 0x0F	; 15
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <display_sum+0x4a>
     230:	00 c0       	rjmp	.+0      	; 0x232 <display_sum+0x50>
     232:	00 00       	nop
        PORTA = 0xFF;
     234:	5b bb       	out	0x1b, r21	; 27
        
        //Right shift digit_select and subtract 1 
        digit_select = digit_select >> 4;
        digit_select--;
     236:	80 7f       	andi	r24, 0xF0	; 240
        
        //Right shift digit_select back
        digit_select = digit_select << 4;
     238:	80 51       	subi	r24, 0x10	; 16
    for (int i = 4; i >= 0; i--) {
     23a:	f1 e0       	ldi	r31, 0x01	; 1
     23c:	22 35       	cpi	r18, 0x52	; 82
     23e:	3f 07       	cpc	r19, r31
     240:	f1 f6       	brne	.-68     	; 0x1fe <display_sum+0x1c>
    }                    
}
     242:	2c 96       	adiw	r28, 0x0c	; 12
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <segsum>:
//                                   segsum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//***********************************************************************************
void segsum(struct time *t) {
     254:	dc 01       	movw	r26, r24
     256:	e2 e5       	ldi	r30, 0x52	; 82
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
            //divide sum by 10 to get to next one's digit
           t->minutes = (t->minutes / 10);
        }
        else if (i > 2){
            //get the last digit of the current
            result = (t->hours % 10);
     25c:	4d ec       	ldi	r20, 0xCD	; 205
        if (i < 2){
     25e:	92 30       	cpi	r25, 0x02	; 2
     260:	30 f0       	brcs	.+12     	; 0x26e <segsum+0x1a>
        else if (i > 2){
     262:	92 30       	cpi	r25, 0x02	; 2
     264:	29 f5       	brne	.+74     	; 0x2b0 <segsum+0x5c>
     266:	9f 5f       	subi	r25, 0xFF	; 255
     268:	31 96       	adiw	r30, 0x01	; 1
        if (i < 2){
     26a:	92 30       	cpi	r25, 0x02	; 2
     26c:	d0 f7       	brcc	.-12     	; 0x262 <segsum+0xe>
            result = (t->minutes % 10);
     26e:	11 96       	adiw	r26, 0x01	; 1
     270:	8c 91       	ld	r24, X
     272:	11 97       	sbiw	r26, 0x01	; 1
     274:	84 9f       	mul	r24, r20
     276:	21 2d       	mov	r18, r1
     278:	11 24       	eor	r1, r1
     27a:	32 2f       	mov	r19, r18
     27c:	36 95       	lsr	r19
     27e:	36 95       	lsr	r19
     280:	36 95       	lsr	r19
     282:	23 2f       	mov	r18, r19
     284:	22 0f       	add	r18, r18
     286:	22 0f       	add	r18, r18
     288:	23 0f       	add	r18, r19
     28a:	22 0f       	add	r18, r18
     28c:	82 1b       	sub	r24, r18
            segment_data[i] = result;
     28e:	80 83       	st	Z, r24
           t->minutes = (t->minutes / 10);
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	2c 91       	ld	r18, X
     294:	11 97       	sbiw	r26, 0x01	; 1
     296:	24 9f       	mul	r18, r20
     298:	21 2d       	mov	r18, r1
     29a:	11 24       	eor	r1, r1
     29c:	26 95       	lsr	r18
     29e:	26 95       	lsr	r18
     2a0:	26 95       	lsr	r18
     2a2:	11 96       	adiw	r26, 0x01	; 1
     2a4:	2c 93       	st	X, r18
     2a6:	11 97       	sbiw	r26, 0x01	; 1
    for (i = 0; i < 5; i++){
     2a8:	94 30       	cpi	r25, 0x04	; 4
     2aa:	e9 f6       	brne	.-70     	; 0x266 <segsum+0x12>
            segment_data[i] = result;
            //divide sum by 10 to get to next one's digit
            t->hours = (t->hours / 10);
        }
    }
    display_sum();
     2ac:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <display_sum>
            result = (t->hours % 10);
     2b0:	12 96       	adiw	r26, 0x02	; 2
     2b2:	2c 91       	ld	r18, X
     2b4:	12 97       	sbiw	r26, 0x02	; 2
     2b6:	24 9f       	mul	r18, r20
     2b8:	81 2d       	mov	r24, r1
     2ba:	11 24       	eor	r1, r1
     2bc:	38 2f       	mov	r19, r24
     2be:	36 95       	lsr	r19
     2c0:	36 95       	lsr	r19
     2c2:	36 95       	lsr	r19
     2c4:	83 2f       	mov	r24, r19
     2c6:	88 0f       	add	r24, r24
     2c8:	88 0f       	add	r24, r24
     2ca:	83 0f       	add	r24, r19
     2cc:	88 0f       	add	r24, r24
     2ce:	28 1b       	sub	r18, r24
            segment_data[i] = result;
     2d0:	20 83       	st	Z, r18
            t->hours = (t->hours / 10);
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	8c 91       	ld	r24, X
     2d6:	12 97       	sbiw	r26, 0x02	; 2
     2d8:	84 9f       	mul	r24, r20
     2da:	81 2d       	mov	r24, r1
     2dc:	11 24       	eor	r1, r1
     2de:	86 95       	lsr	r24
     2e0:	86 95       	lsr	r24
     2e2:	86 95       	lsr	r24
     2e4:	12 96       	adiw	r26, 0x02	; 2
     2e6:	8c 93       	st	X, r24
     2e8:	12 97       	sbiw	r26, 0x02	; 2
     2ea:	de cf       	rjmp	.-68     	; 0x2a8 <segsum+0x54>

000002ec <spi_action>:
// in data from the encoders. The return value is passed into encoder_adjuster to
// adjust the data to send to segsum.
//***********************************************************************************
uint8_t spi_action(uint8_t mode_disp){

    PORTE |= (1 << PE6);                    //Set SH/LD_N high to not read encoder values
     2ec:	1e 9a       	sbi	0x03, 6	; 3
    SPDR = (mode_disp);                     //Place mode_disp out to bar graph
     2ee:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR, SPIF));       //Wait for trasmission to complete
     2f0:	77 9b       	sbis	0x0e, 7	; 14
     2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <spi_action+0x4>
    //_delay_ms(100);
    PORTD |= (1 << PD2);                    //Deselect bar graph      
     2f4:	92 9a       	sbi	0x12, 2	; 18
    PORTE |= (0 << PE6);                    //Set low SH/LD_N to read encoder values
     2f6:	83 b1       	in	r24, 0x03	; 3
     2f8:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	85 e0       	ldi	r24, 0x05	; 5
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <spi_action+0x10>
     300:	00 00       	nop
    _delay_us(1);
    PORTD &= ~(1 << PD2);                         
     302:	92 98       	cbi	0x12, 2	; 18
    PORTE &= ~(1 << PE6);                         
     304:	1e 98       	cbi	0x03, 6	; 3
     306:	85 e0       	ldi	r24, 0x05	; 5
     308:	8a 95       	dec	r24
     30a:	f1 f7       	brne	.-4      	; 0x308 <spi_action+0x1c>
     30c:	00 00       	nop
    _delay_us(1);

    return SPDR;
     30e:	8f b1       	in	r24, 0x0f	; 15
}
     310:	08 95       	ret

00000312 <encoder_adjuster>:
//***********************************************************************************//                                   
//                                 encoder_adjuster                                    
// Takes the values recieved from the encoders and returns counter, which is +- 1,
// as well as mode_multiplier. This return value is passed directly into segsum.
//***********************************************************************************
int8_t encoder_adjuster(uint8_t enc_val){
     312:	cf 93       	push	r28

    //for loop checks both pairs of bits in the nibble for the encoders
    for (int i = 0; i < 2; i++){
        //get either the high or low bits from the encoder
        uint8_t current_bits = ((enc_val >> 2*i) & 0x03);
        switch((prev_enc_val >> 2*i) & 0x03){
     314:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <prev_enc_val.1752>
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <dir_count.1756>
     31e:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <__data_start>
     322:	a8 2f       	mov	r26, r24
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	20 e0       	ldi	r18, 0x00	; 0
    int8_t counter = 0;
     32a:	c0 e0       	ldi	r28, 0x00	; 0
        uint8_t current_bits = ((enc_val >> 2*i) & 0x03);
     32c:	ad 01       	movw	r20, r26
     32e:	02 2e       	mov	r0, r18
     330:	02 c0       	rjmp	.+4      	; 0x336 <encoder_adjuster+0x24>
     332:	55 95       	asr	r21
     334:	47 95       	ror	r20
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <encoder_adjuster+0x20>
     33a:	94 2f       	mov	r25, r20
     33c:	93 70       	andi	r25, 0x03	; 3
        switch((prev_enc_val >> 2*i) & 0x03){
     33e:	ab 01       	movw	r20, r22
     340:	02 2e       	mov	r0, r18
     342:	02 c0       	rjmp	.+4      	; 0x348 <encoder_adjuster+0x36>
     344:	55 95       	asr	r21
     346:	47 95       	ror	r20
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <encoder_adjuster+0x32>
     34c:	43 70       	andi	r20, 0x03	; 3
     34e:	55 27       	eor	r21, r21
     350:	42 30       	cpi	r20, 0x02	; 2
     352:	51 05       	cpc	r21, r1
     354:	51 f1       	breq	.+84     	; 0x3aa <encoder_adjuster+0x98>
     356:	43 30       	cpi	r20, 0x03	; 3
     358:	51 05       	cpc	r21, r1
     35a:	89 f1       	breq	.+98     	; 0x3be <encoder_adjuster+0xac>
     35c:	41 30       	cpi	r20, 0x01	; 1
     35e:	51 05       	cpc	r21, r1
     360:	49 f1       	breq	.+82     	; 0x3b4 <encoder_adjuster+0xa2>
            //compare the previous bits to the current bits to
            //see if we are incrementing or decrementing

            case 0b00: if (current_bits == 0b01){ 
     362:	91 30       	cpi	r25, 0x01	; 1
     364:	51 f0       	breq	.+20     	; 0x37a <encoder_adjuster+0x68>
                           else {
                               dir_count = 0;
                               CW = FALSE;
                           }
                       }  
                       if (current_bits == 0b10){
     366:	92 30       	cpi	r25, 0x02	; 2
     368:	61 f4       	brne	.+24     	; 0x382 <encoder_adjuster+0x70>
                               dir_count = 0;
                               CW = FALSE;
                           }
                       }  
                       if (current_bits == 0b11){
                           if(CW == TRUE){
     36a:	f1 30       	cpi	r31, 0x01	; 1
     36c:	41 f4       	brne	.+16     	; 0x37e <encoder_adjuster+0x6c>
                               dir_count++;
     36e:	ef 5f       	subi	r30, 0xFF	; 255
                               if (dir_count == 4){
     370:	e4 30       	cpi	r30, 0x04	; 4
     372:	39 f4       	brne	.+14     	; 0x382 <encoder_adjuster+0x70>
                                   counter ++;
     374:	cf 5f       	subi	r28, 0xFF	; 255
                                   dir_count = 0;
     376:	e0 e0       	ldi	r30, 0x00	; 0
     378:	04 c0       	rjmp	.+8      	; 0x382 <encoder_adjuster+0x70>
                           if(CW == TRUE){
     37a:	f1 30       	cpi	r31, 0x01	; 1
     37c:	81 f0       	breq	.+32     	; 0x39e <encoder_adjuster+0x8c>
                               }
                           }
                           else {
                               dir_count = 0;
     37e:	e0 e0       	ldi	r30, 0x00	; 0
                               CW = FALSE;
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	2e 5f       	subi	r18, 0xFE	; 254
     384:	3f 4f       	sbci	r19, 0xFF	; 255
    for (int i = 0; i < 2; i++){
     386:	24 30       	cpi	r18, 0x04	; 4
     388:	31 05       	cpc	r19, r1
     38a:	81 f6       	brne	.-96     	; 0x32c <encoder_adjuster+0x1a>
     38c:	f0 93 00 01 	sts	0x0100, r31	; 0x800100 <__data_start>
     390:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <dir_count.1756>
        }
    }

    //set the soon-to-be previous encoder to temp, which held the current
    //encoder values.
    prev_enc_val = temp;
     394:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <prev_enc_val.1752>
    return counter;

}
     398:	8c 2f       	mov	r24, r28
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret
                               dir_count++;
     39e:	ef 5f       	subi	r30, 0xFF	; 255
                               if (dir_count == 4){
     3a0:	e4 30       	cpi	r30, 0x04	; 4
     3a2:	79 f7       	brne	.-34     	; 0x382 <encoder_adjuster+0x70>
                                   counter --;
     3a4:	c1 50       	subi	r28, 0x01	; 1
                                   dir_count = 0;
     3a6:	e0 e0       	ldi	r30, 0x00	; 0
     3a8:	ec cf       	rjmp	.-40     	; 0x382 <encoder_adjuster+0x70>
            case 0b10: if (current_bits == 0b00){ 
     3aa:	99 23       	and	r25, r25
     3ac:	31 f3       	breq	.-52     	; 0x37a <encoder_adjuster+0x68>
                       if (current_bits == 0b11){
     3ae:	93 30       	cpi	r25, 0x03	; 3
     3b0:	e1 f2       	breq	.-72     	; 0x36a <encoder_adjuster+0x58>
     3b2:	e7 cf       	rjmp	.-50     	; 0x382 <encoder_adjuster+0x70>
            case 0b01: if (current_bits == 0b11){ 
     3b4:	93 30       	cpi	r25, 0x03	; 3
     3b6:	09 f3       	breq	.-62     	; 0x37a <encoder_adjuster+0x68>
                       if (current_bits == 0b00){
     3b8:	99 23       	and	r25, r25
     3ba:	b9 f2       	breq	.-82     	; 0x36a <encoder_adjuster+0x58>
     3bc:	e2 cf       	rjmp	.-60     	; 0x382 <encoder_adjuster+0x70>
            case 0b11: if (current_bits == 0b10){ 
     3be:	92 30       	cpi	r25, 0x02	; 2
     3c0:	e1 f2       	breq	.-72     	; 0x37a <encoder_adjuster+0x68>
                       if (current_bits == 0b01){
     3c2:	91 30       	cpi	r25, 0x01	; 1
     3c4:	91 f2       	breq	.-92     	; 0x36a <encoder_adjuster+0x58>
     3c6:	dd cf       	rjmp	.-70     	; 0x382 <encoder_adjuster+0x70>

000003c8 <mode_select>:
//*******************************************************************************
void mode_select(int button, enum mode cur_mode, struct time *alarm){

    
    //Test to see what button was pressed
    switch (button) {
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	91 05       	cpc	r25, r1
     3cc:	81 f1       	breq	.+96     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3ce:	ec f0       	brlt	.+58     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	91 05       	cpc	r25, r1
     3d4:	61 f0       	breq	.+24     	; 0x3ee <mode_select+0x26>
     3d6:	03 97       	sbiw	r24, 0x03	; 3
     3d8:	19 f4       	brne	.+6      	; 0x3e0 <mode_select+0x18>
           }
           else if (cur_mode != ALARM_HANDLER)
                current_mode = SET_VOL;
            break;
        case 3: //alarm off handler
            if (cur_mode == ALARM_HANDLER){
     3da:	63 30       	cpi	r22, 0x03	; 3
     3dc:	71 05       	cpc	r23, r1
     3de:	69 f1       	breq	.+90     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
            else if (cur_mode != ALARM_HANDLER) 
                current_mode = SET_VOL;
            break;
       
       default: //SET_VOL is the default setting
            current_mode = SET_VOL;
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_mode+0x1>
     3e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_mode>
            break;
    }
}
     3ec:	08 95       	ret
            if (cur_mode == ALARM_HANDLER){
     3ee:	63 30       	cpi	r22, 0x03	; 3
     3f0:	71 05       	cpc	r23, r1
     3f2:	b1 f7       	brne	.-20     	; 0x3e0 <mode_select+0x18>
                alarm->seconds += 10;
     3f4:	fa 01       	movw	r30, r20
     3f6:	80 81       	ld	r24, Z
     3f8:	86 5f       	subi	r24, 0xF6	; 246
     3fa:	80 83       	st	Z, r24
                alarm->minutes = 0;
     3fc:	11 82       	std	Z+1, r1	; 0x01
                alarm->hours = 0;
     3fe:	12 82       	std	Z+2, r1	; 0x02
                current_mode = ALARM_HANDLER;
     400:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <current_mode+0x1>
     404:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <current_mode>
     408:	08 95       	ret
    switch (button) {
     40a:	89 2b       	or	r24, r25
     40c:	49 f7       	brne	.-46     	; 0x3e0 <mode_select+0x18>
            if (cur_mode == SET_VOL){            
     40e:	62 30       	cpi	r22, 0x02	; 2
     410:	71 05       	cpc	r23, r1
     412:	e9 f0       	breq	.+58     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
            else if (cur_mode == SET_CLOCK){            
     414:	61 30       	cpi	r22, 0x01	; 1
     416:	71 05       	cpc	r23, r1
     418:	49 f7       	brne	.-46     	; 0x3ec <mode_select+0x24>
                TIMSK |= (1<<TOIE0);
     41a:	87 b7       	in	r24, 0x37	; 55
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	87 bf       	out	0x37, r24	; 55
                current_mode = SET_VOL;
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_mode+0x1>
     428:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_mode>
     42c:	08 95       	ret
            if (cur_mode == SET_VOL){            
     42e:	62 30       	cpi	r22, 0x02	; 2
     430:	71 05       	cpc	r23, r1
     432:	41 f0       	breq	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
            else if (cur_mode == SET_ALARM){            
     434:	67 2b       	or	r22, r23
     436:	d1 f6       	brne	.-76     	; 0x3ec <mode_select+0x24>
     438:	d3 cf       	rjmp	.-90     	; 0x3e0 <mode_select+0x18>
                current_mode = ALARM_HANDLER;
     43a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <current_mode+0x1>
     43e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <current_mode>
     442:	08 95       	ret
                current_mode = SET_ALARM;
     444:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <current_mode+0x1>
     448:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_mode>
     44c:	08 95       	ret
                TIMSK &= ~(1<<TOIE0);
     44e:	87 b7       	in	r24, 0x37	; 55
     450:	8e 7f       	andi	r24, 0xFE	; 254
     452:	87 bf       	out	0x37, r24	; 55
                current_mode = SET_CLOCK;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_mode+0x1>
     45c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_mode>
     460:	08 95       	ret

00000462 <clock_set>:
//*******************************************************************************
//                            clock_set                                  
// Takes in a time, in seconds, that will be sent off to become the displayed time
//*******************************************************************************

void clock_set (struct time *t, uint8_t enc_val){
     462:	fc 01       	movw	r30, r24
    
    t->minutes = enc_val;
     464:	61 83       	std	Z+1, r22	; 0x01
    if (t->minutes > 59){
     466:	6c 33       	cpi	r22, 0x3C	; 60
     468:	78 f0       	brcs	.+30     	; 0x488 <clock_set+0x26>
        t->hours++;
     46a:	82 81       	ldd	r24, Z+2	; 0x02
     46c:	8f 5f       	subi	r24, 0xFF	; 255
     46e:	82 83       	std	Z+2, r24	; 0x02
        t->minutes = t->minutes % 60;
     470:	89 e8       	ldi	r24, 0x89	; 137
     472:	68 9f       	mul	r22, r24
     474:	81 2d       	mov	r24, r1
     476:	11 24       	eor	r1, r1
     478:	82 95       	swap	r24
     47a:	86 95       	lsr	r24
     47c:	87 70       	andi	r24, 0x07	; 7
     47e:	9c e3       	ldi	r25, 0x3C	; 60
     480:	89 9f       	mul	r24, r25
     482:	60 19       	sub	r22, r0
     484:	11 24       	eor	r1, r1
     486:	61 83       	std	Z+1, r22	; 0x01
    }
}
     488:	08 95       	ret

0000048a <__vector_16>:
//                            ISR(TIMER0_OVF_vect)                                  
// ISR performed when timer 0 overflows. Determines when 1 second has
// passed. Responsible for blinking colon after every second and keeping
// track of the 24hr clock. 
//*******************************************************************************
ISR(TIMER0_OVF_vect){
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24

    clock.seconds++;
     496:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <clock>
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <clock>
    //Increment seconds, minutes and hours when appropriate
    //clear each when they reach 60, 60 and 24 respectively.
    if (clock.seconds > 59){
     4a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <clock>
     4a4:	8c 33       	cpi	r24, 0x3C	; 60
     4a6:	38 f0       	brcs	.+14     	; 0x4b6 <__vector_16+0x2c>
        clock.minutes++;
     4a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clock+0x1>
     4ac:	8f 5f       	subi	r24, 0xFF	; 255
     4ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <clock+0x1>
        clock.seconds = 0;
     4b2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <clock>
    }

    if (clock.minutes > 59){
     4b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clock+0x1>
     4ba:	8c 33       	cpi	r24, 0x3C	; 60
     4bc:	38 f0       	brcs	.+14     	; 0x4cc <__vector_16+0x42>
        clock.hours++;
     4be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <clock+0x2>
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <clock+0x2>
        clock.minutes = 0;
     4c8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <clock+0x1>
    }

    if (clock.hours > 23){
     4cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <clock+0x2>
     4d0:	88 31       	cpi	r24, 0x18	; 24
     4d2:	10 f0       	brcs	.+4      	; 0x4d8 <__vector_16+0x4e>
        clock.hours = 0;
     4d4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <clock+0x2>
    if (t->seconds % 2 == 0){
     4d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <clock>
     4dc:	80 ff       	sbrs	r24, 0
     4de:	09 c0       	rjmp	.+18     	; 0x4f2 <__vector_16+0x68>
        return segment_data[2] = 10;
     4e0:	8a e0       	ldi	r24, 0x0A	; 10
     4e2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <segment_data+0x2>
    blink_colon(&clock);
    
    //compare the current time to the set alarm
   // if(clock == alarm_clock);
        //alarm_sounding = TRUE;
}
     4e6:	8f 91       	pop	r24
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti
        return segment_data[2] = 11;
     4f2:	8b e0       	ldi	r24, 0x0B	; 11
     4f4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <segment_data+0x2>
}
     4f8:	8f 91       	pop	r24
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <__vector_14>:
//***********************************************************************************
//                            ISR(TIMER1_OVF_vect)                                  
// Used in fast PWM mode to oscillate PC0 to sent alarm tone. 
//*******************************************************************************
ISR(TIMER1_OVF_vect){
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	11 24       	eor	r1, r1
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
        PORTC ^= (1<<PC0);
     512:	85 b3       	in	r24, 0x15	; 21
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	89 27       	eor	r24, r25
     518:	85 bb       	out	0x15, r24	; 21
        //PORTC &= ~(1 <<PC0);
}
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <__vector_21>:
//***********************************************************************************
//                            ISR(ADC_vect)                                  
// Used to extract ADC result and store in adc_result. 
//*******************************************************************************
ISR(ADC_vect){
     528:	1f 92       	push	r1
     52a:	0f 92       	push	r0
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
    //Set OCR2 to the ADC value divided by 4 to get more precision
    OCR2 = (ADC / 4);
     536:	84 b1       	in	r24, 0x04	; 4
     538:	95 b1       	in	r25, 0x05	; 5
     53a:	96 95       	lsr	r25
     53c:	87 95       	ror	r24
     53e:	96 95       	lsr	r25
     540:	87 95       	ror	r24
     542:	83 bd       	out	0x23, r24	; 35
    //Enable the next conversion
    ADCSRA |= (1<<ADSC);
     544:	36 9a       	sbi	0x06, 6	; 6
}
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <vol_adjust>:
    //uint16_t lower_limit = 100;       
    //uint16_t fifty_duty = 9727;       
    
    //multiply encoder_change by 32.75 to match the voltage steps for the
    //audio amp.
    encoder_change = encoder_change * 33; 
     554:	21 e2       	ldi	r18, 0x21	; 33
     556:	82 9f       	mul	r24, r18
     558:	20 2d       	mov	r18, r0
     55a:	11 24       	eor	r1, r1
    }
    else if(OCR3A + encoder_change < lower_limit) {
        OCR3A = lower_limit;
    }
    */
    OCR3A += encoder_change;
     55c:	e6 e8       	ldi	r30, 0x86	; 134
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	91 81       	ldd	r25, Z+1	; 0x01
     564:	82 0f       	add	r24, r18
     566:	91 1d       	adc	r25, r1
     568:	27 fd       	sbrc	r18, 7
     56a:	9a 95       	dec	r25
     56c:	91 83       	std	Z+1, r25	; 0x01
     56e:	80 83       	st	Z, r24
    }

   else 
        OCR3A += (encoder_change);
        */
}
     570:	08 95       	ret

00000572 <mode_action>:
//***********************************************************************************
//                            mode_action()                                  
// Depending on what the current mode is, we do the appropriate action.
//*******************************************************************************
void mode_action(enum mode cur_mode, uint8_t encoder_change, struct time *t, struct time *alarm){
    switch (cur_mode){
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	91 05       	cpc	r25, r1
     576:	81 f1       	breq	.+96     	; 0x5d8 <mode_action+0x66>
     578:	28 f1       	brcs	.+74     	; 0x5c4 <mode_action+0x52>
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	91 05       	cpc	r25, r1
     57e:	19 f0       	breq	.+6      	; 0x586 <mode_action+0x14>
     580:	03 97       	sbiw	r24, 0x03	; 3
     582:	b9 f0       	breq	.+46     	; 0x5b2 <mode_action+0x40>
     584:	08 95       	ret
    OCR3A += encoder_change;
     586:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     58a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    encoder_change = encoder_change * 33; 
     58e:	21 e2       	ldi	r18, 0x21	; 33
     590:	62 9f       	mul	r22, r18
     592:	60 2d       	mov	r22, r0
     594:	11 24       	eor	r1, r1
    OCR3A += encoder_change;
     596:	86 0f       	add	r24, r22
     598:	91 1d       	adc	r25, r1
     59a:	67 fd       	sbrc	r22, 7
     59c:	9a 95       	dec	r25
     59e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
            //clock_set(t->minutes, t->hours);
           // segsum(alarm_seconds, alarm_minutes);
            break;
        case 2: //adjusting the volume
            vol_adjust(encoder_change);
            clear_display();
     5a6:	0e 94 ae 04 	call	0x95c	; 0x95c <clear_display>
            string2lcd("VOLUME ADJUST");
     5aa:	85 e2       	ldi	r24, 0x25	; 37
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <string2lcd>
            break;
        case 3: //alarm handling
            TIMSK &= ~(1<<TOIE1);
     5b2:	87 b7       	in	r24, 0x37	; 55
     5b4:	8b 7f       	andi	r24, 0xFB	; 251
     5b6:	87 bf       	out	0x37, r24	; 55
            clear_display();
     5b8:	0e 94 ae 04 	call	0x95c	; 0x95c <clear_display>
            string2lcd("ALARMED DISABLED");
     5bc:	83 e3       	ldi	r24, 0x33	; 51
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <string2lcd>
    t->minutes = enc_val;
     5c4:	f9 01       	movw	r30, r18
     5c6:	61 83       	std	Z+1, r22	; 0x01
    if (t->minutes > 59){
     5c8:	6c 33       	cpi	r22, 0x3C	; 60
     5ca:	08 f5       	brcc	.+66     	; 0x60e <mode_action+0x9c>
            clear_display();
     5cc:	0e 94 ae 04 	call	0x95c	; 0x95c <clear_display>
            string2lcd("ALARM SET");
     5d0:	82 e1       	ldi	r24, 0x12	; 18
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <string2lcd>
    t->minutes = enc_val;
     5d8:	fa 01       	movw	r30, r20
     5da:	61 83       	std	Z+1, r22	; 0x01
    if (t->minutes > 59){
     5dc:	6c 33       	cpi	r22, 0x3C	; 60
     5de:	30 f4       	brcc	.+12     	; 0x5ec <mode_action+0x7a>
            clear_display();
     5e0:	0e 94 ae 04 	call	0x95c	; 0x95c <clear_display>
            string2lcd("TIME SET");
     5e4:	8c e1       	ldi	r24, 0x1C	; 28
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <string2lcd>
        t->hours++;
     5ec:	82 81       	ldd	r24, Z+2	; 0x02
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	82 83       	std	Z+2, r24	; 0x02
        t->minutes = t->minutes % 60;
     5f2:	89 e8       	ldi	r24, 0x89	; 137
     5f4:	68 9f       	mul	r22, r24
     5f6:	81 2d       	mov	r24, r1
     5f8:	11 24       	eor	r1, r1
     5fa:	82 95       	swap	r24
     5fc:	86 95       	lsr	r24
     5fe:	87 70       	andi	r24, 0x07	; 7
     600:	fc e3       	ldi	r31, 0x3C	; 60
     602:	8f 9f       	mul	r24, r31
     604:	60 19       	sub	r22, r0
     606:	11 24       	eor	r1, r1
     608:	fa 01       	movw	r30, r20
     60a:	61 83       	std	Z+1, r22	; 0x01
     60c:	e9 cf       	rjmp	.-46     	; 0x5e0 <mode_action+0x6e>
        t->hours++;
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	8f 5f       	subi	r24, 0xFF	; 255
     612:	82 83       	std	Z+2, r24	; 0x02
        t->minutes = t->minutes % 60;
     614:	89 e8       	ldi	r24, 0x89	; 137
     616:	68 9f       	mul	r22, r24
     618:	81 2d       	mov	r24, r1
     61a:	11 24       	eor	r1, r1
     61c:	82 95       	swap	r24
     61e:	86 95       	lsr	r24
     620:	87 70       	andi	r24, 0x07	; 7
     622:	fc e3       	ldi	r31, 0x3C	; 60
     624:	8f 9f       	mul	r24, r31
     626:	60 19       	sub	r22, r0
     628:	11 24       	eor	r1, r1
     62a:	f9 01       	movw	r30, r18
     62c:	61 83       	std	Z+1, r22	; 0x01
     62e:	ce cf       	rjmp	.-100    	; 0x5cc <mode_action+0x5a>

00000630 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	81 11       	cpse	r24, r1
     634:	01 c0       	rjmp	.+2      	; 0x638 <send_lcd+0x8>
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     63a:	77 9b       	sbis	0x0e, 7	; 14
     63c:	fe cf       	rjmp	.-4      	; 0x63a <send_lcd+0xa>
  SPDR = byte;                        //send payload
     63e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     640:	77 9b       	sbis	0x0e, 7	; 14
     642:	fe cf       	rjmp	.-4      	; 0x640 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     644:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     648:	88 60       	ori	r24, 0x08	; 8
     64a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     64e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     652:	87 7f       	andi	r24, 0xF7	; 247
     654:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
}
     658:	08 95       	ret

0000065a <refresh_lcd>:
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     65a:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <i.1991>
     65e:	82 0f       	add	r24, r18
     660:	91 1d       	adc	r25, r1
     662:	fc 01       	movw	r30, r24
     664:	80 81       	ld	r24, Z
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     66a:	77 9b       	sbis	0x0e, 7	; 14
     66c:	fe cf       	rjmp	.-4      	; 0x66a <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
     66e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     670:	77 9b       	sbis	0x0e, 7	; 14
     672:	fe cf       	rjmp	.-4      	; 0x670 <refresh_lcd+0x16>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     674:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     678:	88 60       	ori	r24, 0x08	; 8
     67a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     67e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     682:	87 7f       	andi	r24, 0xF7	; 247
     684:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 i++;   //increment to next character
     688:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <i.1991>
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <i.1991>
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     692:	80 31       	cpi	r24, 0x10	; 16
     694:	f9 f0       	breq	.+62     	; 0x6d4 <refresh_lcd+0x7a>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     696:	80 32       	cpi	r24, 0x20	; 32
     698:	09 f0       	breq	.+2      	; 0x69c <refresh_lcd+0x42>
}//refresh_lcd
     69a:	08 95       	ret
     69c:	e5 ed       	ldi	r30, 0xD5	; 213
     69e:	ea 95       	dec	r30
     6a0:	f1 f7       	brne	.-4      	; 0x69e <refresh_lcd+0x44>
     6a2:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6a4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6a6:	77 9b       	sbis	0x0e, 7	; 14
     6a8:	fe cf       	rjmp	.-4      	; 0x6a6 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     6aa:	80 e8       	ldi	r24, 0x80	; 128
     6ac:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6ae:	77 9b       	sbis	0x0e, 7	; 14
     6b0:	fe cf       	rjmp	.-4      	; 0x6ae <refresh_lcd+0x54>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6b6:	88 60       	ori	r24, 0x08	; 8
     6b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6c0:	87 7f       	andi	r24, 0xF7	; 247
     6c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6c6:	f5 ed       	ldi	r31, 0xD5	; 213
     6c8:	fa 95       	dec	r31
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <refresh_lcd+0x6e>
     6cc:	00 00       	nop
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     6ce:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <i.1991>
}//refresh_lcd
     6d2:	08 95       	ret
     6d4:	f5 ed       	ldi	r31, 0xD5	; 213
     6d6:	fa 95       	dec	r31
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <refresh_lcd+0x7c>
     6da:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6dc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6de:	77 9b       	sbis	0x0e, 7	; 14
     6e0:	fe cf       	rjmp	.-4      	; 0x6de <refresh_lcd+0x84>
  SPDR = byte;                        //send payload
     6e2:	80 ec       	ldi	r24, 0xC0	; 192
     6e4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6e6:	77 9b       	sbis	0x0e, 7	; 14
     6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <refresh_lcd+0x8c>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ee:	88 60       	ori	r24, 0x08	; 8
     6f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f8:	87 7f       	andi	r24, 0xF7	; 247
     6fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6fe:	85 ed       	ldi	r24, 0xD5	; 213
     700:	8a 95       	dec	r24
     702:	f1 f7       	brne	.-4      	; 0x700 <refresh_lcd+0xa6>
     704:	00 00       	nop
     706:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <i.1991>
     70a:	c5 cf       	rjmp	.-118    	; 0x696 <refresh_lcd+0x3c>

0000070c <set_custom_character>:
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     70c:	66 0f       	add	r22, r22
     70e:	66 0f       	add	r22, r22
     710:	66 0f       	add	r22, r22
     712:	60 5c       	subi	r22, 0xC0	; 192
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     714:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     716:	77 9b       	sbis	0x0e, 7	; 14
     718:	fe cf       	rjmp	.-4      	; 0x716 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     71a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     71c:	77 9b       	sbis	0x0e, 7	; 14
     71e:	fe cf       	rjmp	.-4      	; 0x71c <set_custom_character+0x10>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     720:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     724:	28 60       	ori	r18, 0x08	; 8
     726:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     72a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     72e:	27 7f       	andi	r18, 0xF7	; 247
     730:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     734:	25 ed       	ldi	r18, 0xD5	; 213
     736:	2a 95       	dec	r18
     738:	f1 f7       	brne	.-4      	; 0x736 <set_custom_character+0x2a>
     73a:	00 00       	nop
     73c:	fc 01       	movw	r30, r24
     73e:	9c 01       	movw	r18, r24
     740:	28 5f       	subi	r18, 0xF8	; 248
     742:	3f 4f       	sbci	r19, 0xFF	; 255
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     744:	91 e0       	ldi	r25, 0x01	; 1
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     746:	81 91       	ld	r24, Z+
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     748:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     74a:	77 9b       	sbis	0x0e, 7	; 14
     74c:	fe cf       	rjmp	.-4      	; 0x74a <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     74e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     750:	77 9b       	sbis	0x0e, 7	; 14
     752:	fe cf       	rjmp	.-4      	; 0x750 <set_custom_character+0x44>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     754:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     758:	88 60       	ori	r24, 0x08	; 8
     75a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     75e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     762:	87 7f       	andi	r24, 0xF7	; 247
     764:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     768:	85 ed       	ldi	r24, 0xD5	; 213
     76a:	8a 95       	dec	r24
     76c:	f1 f7       	brne	.-4      	; 0x76a <set_custom_character+0x5e>
     76e:	00 00       	nop
    for(i=0; i<8; i++){
     770:	e2 17       	cp	r30, r18
     772:	f3 07       	cpc	r31, r19
     774:	41 f7       	brne	.-48     	; 0x746 <set_custom_character+0x3a>
}
     776:	08 95       	ret

00000778 <set_cursor>:
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     778:	8d 5f       	subi	r24, 0xFD	; 253
     77a:	82 95       	swap	r24
     77c:	88 0f       	add	r24, r24
     77e:	88 0f       	add	r24, r24
     780:	80 7c       	andi	r24, 0xC0	; 192
     782:	60 58       	subi	r22, 0x80	; 128
     784:	68 0f       	add	r22, r24
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     786:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     788:	77 9b       	sbis	0x0e, 7	; 14
     78a:	fe cf       	rjmp	.-4      	; 0x788 <set_cursor+0x10>
  SPDR = byte;                        //send payload
     78c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     78e:	77 9b       	sbis	0x0e, 7	; 14
     790:	fe cf       	rjmp	.-4      	; 0x78e <set_cursor+0x16>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     792:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     796:	88 60       	ori	r24, 0x08	; 8
     798:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     79c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a0:	87 7f       	andi	r24, 0xF7	; 247
     7a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
}
     7a6:	08 95       	ret

000007a8 <uint2lcd>:
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     7a8:	81 11       	cpse	r24, r1
     7aa:	13 c0       	rjmp	.+38     	; 0x7d2 <uint2lcd+0x2a>
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7b0:	77 9b       	sbis	0x0e, 7	; 14
     7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     7b4:	80 e3       	ldi	r24, 0x30	; 48
     7b6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7b8:	77 9b       	sbis	0x0e, 7	; 14
     7ba:	fe cf       	rjmp	.-4      	; 0x7b8 <uint2lcd+0x10>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7c0:	88 60       	ori	r24, 0x08	; 8
     7c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7ca:	87 7f       	andi	r24, 0xF7	; 247
     7cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
}
     7d0:	08 95       	ret
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     7d2:	84 36       	cpi	r24, 0x64	; 100
     7d4:	c0 f4       	brcc	.+48     	; 0x806 <uint2lcd+0x5e>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     7d6:	8a 30       	cpi	r24, 0x0A	; 10
     7d8:	70 f5       	brcc	.+92     	; 0x836 <uint2lcd+0x8e>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     7da:	9d ec       	ldi	r25, 0xCD	; 205
     7dc:	89 9f       	mul	r24, r25
     7de:	91 2d       	mov	r25, r1
     7e0:	11 24       	eor	r1, r1
     7e2:	96 95       	lsr	r25
     7e4:	96 95       	lsr	r25
     7e6:	96 95       	lsr	r25
     7e8:	29 2f       	mov	r18, r25
     7ea:	22 0f       	add	r18, r18
     7ec:	22 0f       	add	r18, r18
     7ee:	92 0f       	add	r25, r18
     7f0:	99 0f       	add	r25, r25
     7f2:	89 1b       	sub	r24, r25
     7f4:	80 5d       	subi	r24, 0xD0	; 208
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7fa:	77 9b       	sbis	0x0e, 7	; 14
     7fc:	fe cf       	rjmp	.-4      	; 0x7fa <uint2lcd+0x52>
  SPDR = byte;                        //send payload
     7fe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     800:	77 9b       	sbis	0x0e, 7	; 14
     802:	fe cf       	rjmp	.-4      	; 0x800 <uint2lcd+0x58>
     804:	db cf       	rjmp	.-74     	; 0x7bc <uint2lcd+0x14>
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     806:	99 e2       	ldi	r25, 0x29	; 41
     808:	89 9f       	mul	r24, r25
     80a:	91 2d       	mov	r25, r1
     80c:	11 24       	eor	r1, r1
     80e:	92 95       	swap	r25
     810:	9f 70       	andi	r25, 0x0F	; 15
     812:	90 5d       	subi	r25, 0xD0	; 208
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     818:	77 9b       	sbis	0x0e, 7	; 14
     81a:	fe cf       	rjmp	.-4      	; 0x818 <uint2lcd+0x70>
  SPDR = byte;                        //send payload
     81c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     81e:	77 9b       	sbis	0x0e, 7	; 14
     820:	fe cf       	rjmp	.-4      	; 0x81e <uint2lcd+0x76>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     822:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     826:	98 60       	ori	r25, 0x08	; 8
     828:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     82c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     830:	97 7f       	andi	r25, 0xF7	; 247
     832:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     836:	99 e2       	ldi	r25, 0x29	; 41
     838:	89 9f       	mul	r24, r25
     83a:	91 2d       	mov	r25, r1
     83c:	11 24       	eor	r1, r1
     83e:	92 95       	swap	r25
     840:	9f 70       	andi	r25, 0x0F	; 15
     842:	38 2f       	mov	r19, r24
     844:	24 e6       	ldi	r18, 0x64	; 100
     846:	92 9f       	mul	r25, r18
     848:	30 19       	sub	r19, r0
     84a:	11 24       	eor	r1, r1
     84c:	2d ec       	ldi	r18, 0xCD	; 205
     84e:	32 9f       	mul	r19, r18
     850:	91 2d       	mov	r25, r1
     852:	11 24       	eor	r1, r1
     854:	96 95       	lsr	r25
     856:	96 95       	lsr	r25
     858:	96 95       	lsr	r25
     85a:	90 5d       	subi	r25, 0xD0	; 208
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     860:	77 9b       	sbis	0x0e, 7	; 14
     862:	fe cf       	rjmp	.-4      	; 0x860 <uint2lcd+0xb8>
  SPDR = byte;                        //send payload
     864:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     866:	77 9b       	sbis	0x0e, 7	; 14
     868:	fe cf       	rjmp	.-4      	; 0x866 <uint2lcd+0xbe>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     86a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     86e:	98 60       	ori	r25, 0x08	; 8
     870:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     874:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     878:	97 7f       	andi	r25, 0xF7	; 247
     87a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     87e:	ad cf       	rjmp	.-166    	; 0x7da <uint2lcd+0x32>

00000880 <int2lcd>:
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     880:	87 ff       	sbrs	r24, 7
     882:	19 c0       	rjmp	.+50     	; 0x8b6 <int2lcd+0x36>
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     888:	77 9b       	sbis	0x0e, 7	; 14
     88a:	fe cf       	rjmp	.-4      	; 0x888 <int2lcd+0x8>
  SPDR = byte;                        //send payload
     88c:	9d e2       	ldi	r25, 0x2D	; 45
     88e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     890:	77 9b       	sbis	0x0e, 7	; 14
     892:	fe cf       	rjmp	.-4      	; 0x890 <int2lcd+0x10>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     894:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     898:	98 60       	ori	r25, 0x08	; 8
     89a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     89e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8a2:	97 7f       	andi	r25, 0xF7	; 247
     8a4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8a8:	95 ed       	ldi	r25, 0xD5	; 213
     8aa:	9a 95       	dec	r25
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <int2lcd+0x2a>
     8ae:	00 00       	nop
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     8b0:	81 95       	neg	r24
     8b2:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <uint2lcd>
    else          {uint2lcd(number);                                            }
     8b6:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <uint2lcd>

000008ba <cursor_on>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ba:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8bc:	77 9b       	sbis	0x0e, 7	; 14
     8be:	fe cf       	rjmp	.-4      	; 0x8bc <cursor_on+0x2>
  SPDR = byte;                        //send payload
     8c0:	8e e0       	ldi	r24, 0x0E	; 14
     8c2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8c4:	77 9b       	sbis	0x0e, 7	; 14
     8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <cursor_on+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8cc:	88 60       	ori	r24, 0x08	; 8
     8ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8d6:	87 7f       	andi	r24, 0xF7	; 247
     8d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     8dc:	08 95       	ret

000008de <cursor_off>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8de:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8e0:	77 9b       	sbis	0x0e, 7	; 14
     8e2:	fe cf       	rjmp	.-4      	; 0x8e0 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     8e4:	8c e0       	ldi	r24, 0x0C	; 12
     8e6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8e8:	77 9b       	sbis	0x0e, 7	; 14
     8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <cursor_off+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8f0:	88 60       	ori	r24, 0x08	; 8
     8f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8fa:	87 7f       	andi	r24, 0xF7	; 247
     8fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     900:	08 95       	ret

00000902 <shift_right>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     902:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     904:	77 9b       	sbis	0x0e, 7	; 14
     906:	fe cf       	rjmp	.-4      	; 0x904 <shift_right+0x2>
  SPDR = byte;                        //send payload
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     90c:	77 9b       	sbis	0x0e, 7	; 14
     90e:	fe cf       	rjmp	.-4      	; 0x90c <shift_right+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     910:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     914:	88 60       	ori	r24, 0x08	; 8
     916:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     91a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     91e:	87 7f       	andi	r24, 0xF7	; 247
     920:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     924:	08 95       	ret

00000926 <shift_left>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     926:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     928:	77 9b       	sbis	0x0e, 7	; 14
     92a:	fe cf       	rjmp	.-4      	; 0x928 <shift_left+0x2>
  SPDR = byte;                        //send payload
     92c:	88 e1       	ldi	r24, 0x18	; 24
     92e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     930:	77 9b       	sbis	0x0e, 7	; 14
     932:	fe cf       	rjmp	.-4      	; 0x930 <shift_left+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     934:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     938:	88 60       	ori	r24, 0x08	; 8
     93a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     93e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     942:	87 7f       	andi	r24, 0xF7	; 247
     944:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     948:	08 95       	ret

0000094a <strobe_lcd>:
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     94a:	e2 e6       	ldi	r30, 0x62	; 98
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	88 60       	ori	r24, 0x08	; 8
     952:	80 83       	st	Z, r24
     954:	80 81       	ld	r24, Z
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	80 83       	st	Z, r24
 LCD_PORT |= (1<<LCD_STROBE_BIT);           //set strobe bit
 asm("nop"); asm("nop"); asm("nop"); asm("nop"); //4 cycle wait 
 LCD_PORT &= ~(1<<LCD_STROBE_BIT);          //clear strobe bit
 asm("nop"); asm("nop"); asm("nop"); asm("nop"); //4 cycle wait 
#endif
}
     95a:	08 95       	ret

0000095c <clear_display>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     95c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     95e:	77 9b       	sbis	0x0e, 7	; 14
     960:	fe cf       	rjmp	.-4      	; 0x95e <clear_display+0x2>
  SPDR = byte;                        //send payload
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     966:	77 9b       	sbis	0x0e, 7	; 14
     968:	fe cf       	rjmp	.-4      	; 0x966 <clear_display+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     96a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     96e:	88 60       	ori	r24, 0x08	; 8
     970:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     974:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     978:	87 7f       	andi	r24, 0xF7	; 247
     97a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     97e:	8f e1       	ldi	r24, 0x1F	; 31
     980:	9c e1       	ldi	r25, 0x1C	; 28
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <clear_display+0x26>
     986:	00 c0       	rjmp	.+0      	; 0x988 <clear_display+0x2c>
     988:	00 00       	nop
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
  _delay_us(1800);   //1.8ms wait for LCD execution
} 
     98a:	08 95       	ret

0000098c <cursor_home>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     98c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     98e:	77 9b       	sbis	0x0e, 7	; 14
     990:	fe cf       	rjmp	.-4      	; 0x98e <cursor_home+0x2>
  SPDR = byte;                        //send payload
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     996:	77 9b       	sbis	0x0e, 7	; 14
     998:	fe cf       	rjmp	.-4      	; 0x996 <cursor_home+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     99a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     99e:	88 60       	ori	r24, 0x08	; 8
     9a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9a8:	87 7f       	andi	r24, 0xF7	; 247
     9aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ae:	8f e6       	ldi	r24, 0x6F	; 111
     9b0:	97 e1       	ldi	r25, 0x17	; 23
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <cursor_home+0x26>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <cursor_home+0x2c>
     9b8:	00 00       	nop
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
  _delay_us(1500);  //1.5ms wait for LCD execution
  } 
     9ba:	08 95       	ret

000009bc <line2_col1>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9bc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9be:	77 9b       	sbis	0x0e, 7	; 14
     9c0:	fe cf       	rjmp	.-4      	; 0x9be <line2_col1+0x2>
  SPDR = byte;                        //send payload
     9c2:	80 ec       	ldi	r24, 0xC0	; 192
     9c4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9c6:	77 9b       	sbis	0x0e, 7	; 14
     9c8:	fe cf       	rjmp	.-4      	; 0x9c6 <line2_col1+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ce:	88 60       	ori	r24, 0x08	; 8
     9d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9d8:	87 7f       	andi	r24, 0xF7	; 247
     9da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9de:	85 ed       	ldi	r24, 0xD5	; 213
     9e0:	8a 95       	dec	r24
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <line2_col1+0x24>
     9e4:	00 00       	nop
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
  _delay_us(40);  //40us wait for LCD execution
} 
     9e6:	08 95       	ret

000009e8 <line1_col1>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9e8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9ea:	77 9b       	sbis	0x0e, 7	; 14
     9ec:	fe cf       	rjmp	.-4      	; 0x9ea <line1_col1+0x2>
  SPDR = byte;                        //send payload
     9ee:	80 e8       	ldi	r24, 0x80	; 128
     9f0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9f2:	77 9b       	sbis	0x0e, 7	; 14
     9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <line1_col1+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9fa:	88 60       	ori	r24, 0x08	; 8
     9fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a04:	87 7f       	andi	r24, 0xF7	; 247
     a06:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a0a:	85 ed       	ldi	r24, 0xD5	; 213
     a0c:	8a 95       	dec	r24
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <line1_col1+0x24>
     a10:	00 00       	nop
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
  _delay_us(40);  //40us wait for LCD execution
} 
     a12:	08 95       	ret

00000a14 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     a14:	90 e1       	ldi	r25, 0x10	; 16
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a16:	31 e0       	ldi	r19, 0x01	; 1
  SPDR = byte;                        //send payload
     a18:	20 e2       	ldi	r18, 0x20	; 32
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a1a:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a1c:	77 9b       	sbis	0x0e, 7	; 14
     a1e:	fe cf       	rjmp	.-4      	; 0xa1c <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     a20:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a22:	77 9b       	sbis	0x0e, 7	; 14
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <fill_spaces+0xe>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a2a:	88 60       	ori	r24, 0x08	; 8
     a2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a34:	87 7f       	andi	r24, 0xF7	; 247
     a36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a3a:	85 ed       	ldi	r24, 0xD5	; 213
     a3c:	8a 95       	dec	r24
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <fill_spaces+0x28>
     a40:	00 00       	nop
     a42:	91 50       	subi	r25, 0x01	; 1
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     a44:	51 f7       	brne	.-44     	; 0xa1a <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     a46:	08 95       	ret

00000a48 <char2lcd>:
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a4c:	77 9b       	sbis	0x0e, 7	; 14
     a4e:	fe cf       	rjmp	.-4      	; 0xa4c <char2lcd+0x4>
  SPDR = byte;                        //send payload
     a50:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a52:	77 9b       	sbis	0x0e, 7	; 14
     a54:	fe cf       	rjmp	.-4      	; 0xa52 <char2lcd+0xa>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a5a:	88 60       	ori	r24, 0x08	; 8
     a5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a60:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a64:	87 7f       	andi	r24, 0xF7	; 247
     a66:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
     a6a:	08 95       	ret

00000a6c <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     a6c:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a74:	71 e0       	ldi	r23, 0x01	; 1
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a76:	4e 0f       	add	r20, r30
     a78:	5f 1f       	adc	r21, r31
     a7a:	da 01       	movw	r26, r20
     a7c:	8c 91       	ld	r24, X
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a7e:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a80:	77 9b       	sbis	0x0e, 7	; 14
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     a84:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a86:	77 9b       	sbis	0x0e, 7	; 14
     a88:	fe cf       	rjmp	.-4      	; 0xa86 <string2lcd+0x1a>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a8a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a8e:	98 60       	ori	r25, 0x08	; 8
     a90:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a94:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a98:	97 7f       	andi	r25, 0xF7	; 247
     a9a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a9e:	b5 ed       	ldi	r27, 0xD5	; 213
     aa0:	ba 95       	dec	r27
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <string2lcd+0x34>
     aa4:	00 00       	nop
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	46 2f       	mov	r20, r22
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	df 01       	movw	r26, r30
     aae:	0d 90       	ld	r0, X+
     ab0:	00 20       	and	r0, r0
     ab2:	e9 f7       	brne	.-6      	; 0xaae <string2lcd+0x42>
     ab4:	9d 01       	movw	r18, r26
     ab6:	2e 1b       	sub	r18, r30
     ab8:	3f 0b       	sbc	r19, r31
     aba:	22 50       	subi	r18, 0x02	; 2
     abc:	31 09       	sbc	r19, r1
     abe:	24 17       	cp	r18, r20
     ac0:	35 07       	cpc	r19, r21
     ac2:	c8 f6       	brcc	.-78     	; 0xa76 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     ac4:	08 95       	ret

00000ac6 <lcd_init>:
	__builtin_avr_delay_cycles(__ticks_dc);
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	99 ef       	ldi	r25, 0xF9	; 249
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <lcd_init+0x4>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <lcd_init+0xa>
     ad0:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     ad2:	88 e0       	ldi	r24, 0x08	; 8
     ad4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ad8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ada:	77 9b       	sbis	0x0e, 7	; 14
     adc:	fe cf       	rjmp	.-4      	; 0xada <lcd_init+0x14>
  SPDR = byte;                        //send payload
     ade:	80 e3       	ldi	r24, 0x30	; 48
     ae0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ae2:	77 9b       	sbis	0x0e, 7	; 14
     ae4:	fe cf       	rjmp	.-4      	; 0xae2 <lcd_init+0x1c>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ae6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af4:	87 7f       	andi	r24, 0xF7	; 247
     af6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     afa:	8f e5       	ldi	r24, 0x5F	; 95
     afc:	9d e6       	ldi	r25, 0x6D	; 109
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <lcd_init+0x38>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <lcd_init+0x3e>
     b04:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b06:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b10:	77 9b       	sbis	0x0e, 7	; 14
     b12:	fe cf       	rjmp	.-4      	; 0xb10 <lcd_init+0x4a>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b14:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b18:	88 60       	ori	r24, 0x08	; 8
     b1a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b1e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b22:	87 7f       	andi	r24, 0xF7	; 247
     b24:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b28:	8f e5       	ldi	r24, 0x5F	; 95
     b2a:	9d e6       	ldi	r25, 0x6D	; 109
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <lcd_init+0x66>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <lcd_init+0x6c>
     b32:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b34:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b36:	77 9b       	sbis	0x0e, 7	; 14
     b38:	fe cf       	rjmp	.-4      	; 0xb36 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     b3a:	80 e3       	ldi	r24, 0x30	; 48
     b3c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b3e:	77 9b       	sbis	0x0e, 7	; 14
     b40:	fe cf       	rjmp	.-4      	; 0xb3e <lcd_init+0x78>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b42:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b46:	88 60       	ori	r24, 0x08	; 8
     b48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b50:	87 7f       	andi	r24, 0xF7	; 247
     b52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b56:	8f e5       	ldi	r24, 0x5F	; 95
     b58:	9d e6       	ldi	r25, 0x6D	; 109
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <lcd_init+0x94>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <lcd_init+0x9a>
     b60:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b62:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b64:	77 9b       	sbis	0x0e, 7	; 14
     b66:	fe cf       	rjmp	.-4      	; 0xb64 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     b68:	88 e3       	ldi	r24, 0x38	; 56
     b6a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b6c:	77 9b       	sbis	0x0e, 7	; 14
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <lcd_init+0xa6>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b70:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b7e:	87 7f       	andi	r24, 0xF7	; 247
     b80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b84:	8f e1       	ldi	r24, 0x1F	; 31
     b86:	9e e4       	ldi	r25, 0x4E	; 78
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <lcd_init+0xc2>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <lcd_init+0xc8>
     b8e:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b90:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b92:	77 9b       	sbis	0x0e, 7	; 14
     b94:	fe cf       	rjmp	.-4      	; 0xb92 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     b96:	88 e0       	ldi	r24, 0x08	; 8
     b98:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b9a:	77 9b       	sbis	0x0e, 7	; 14
     b9c:	fe cf       	rjmp	.-4      	; 0xb9a <lcd_init+0xd4>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb2:	8f e1       	ldi	r24, 0x1F	; 31
     bb4:	9e e4       	ldi	r25, 0x4E	; 78
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <lcd_init+0xf0>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <lcd_init+0xf6>
     bbc:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bbe:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bc0:	77 9b       	sbis	0x0e, 7	; 14
     bc2:	fe cf       	rjmp	.-4      	; 0xbc0 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bc8:	77 9b       	sbis	0x0e, 7	; 14
     bca:	fe cf       	rjmp	.-4      	; 0xbc8 <lcd_init+0x102>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bcc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd0:	88 60       	ori	r24, 0x08	; 8
     bd2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be0:	8f e1       	ldi	r24, 0x1F	; 31
     be2:	9e e4       	ldi	r25, 0x4E	; 78
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <lcd_init+0x11e>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <lcd_init+0x124>
     bea:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bec:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bee:	77 9b       	sbis	0x0e, 7	; 14
     bf0:	fe cf       	rjmp	.-4      	; 0xbee <lcd_init+0x128>
  SPDR = byte;                        //send payload
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bf6:	77 9b       	sbis	0x0e, 7	; 14
     bf8:	fe cf       	rjmp	.-4      	; 0xbf6 <lcd_init+0x130>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bfa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c0e:	8f e1       	ldi	r24, 0x1F	; 31
     c10:	9e e4       	ldi	r25, 0x4E	; 78
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <lcd_init+0x14c>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <lcd_init+0x152>
     c18:	00 00       	nop
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c1a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c1c:	77 9b       	sbis	0x0e, 7	; 14
     c1e:	fe cf       	rjmp	.-4      	; 0xc1c <lcd_init+0x156>
  SPDR = byte;                        //send payload
     c20:	8c e0       	ldi	r24, 0x0C	; 12
     c22:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c24:	77 9b       	sbis	0x0e, 7	; 14
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <lcd_init+0x15e>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c36:	87 7f       	andi	r24, 0xF7	; 247
     c38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c3c:	8f e1       	ldi	r24, 0x1F	; 31
     c3e:	9e e4       	ldi	r25, 0x4E	; 78
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <lcd_init+0x17a>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <lcd_init+0x180>
     c46:	00 00       	nop
  //send_lcd(CMD_BYTE, 0x08, 5000);
  send_lcd(CMD_BYTE, 0x01); _delay_ms(7)  //clear display
  send_lcd(CMD_BYTE, 0x06);  _delay_ms(5) //cursor moves to right, don't shift display
  send_lcd(CMD_BYTE, 0x0C | (CURSOR_VISIBLE<<1) | CURSOR_BLINK); _delay_ms(5);
#endif
}
     c48:	08 95       	ret

00000c4a <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	69 97       	sbiw	r28, 0x19	; 25
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	f4 2e       	mov	r15, r20
     c78:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     c7a:	00 23       	and	r16, r16
     c7c:	59 f0       	breq	.+22     	; 0xc94 <lcd_int32+0x4a>
        bSigned = (qr.quot<0);
     c7e:	4b 01       	movw	r8, r22
     c80:	5c 01       	movw	r10, r24
     c82:	88 24       	eor	r8, r8
     c84:	b7 fc       	sbrc	r11, 7
     c86:	83 94       	inc	r8
     c88:	99 24       	eor	r9, r9
     c8a:	aa 24       	eor	r10, r10
     c8c:	bb 24       	eor	r11, r11
     c8e:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
     c90:	97 fd       	sbrc	r25, 7
     c92:	af c0       	rjmp	.+350    	; 0xdf2 <lcd_int32+0x1a8>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     c94:	11 11       	cpse	r17, r1
     c96:	7d c0       	rjmp	.+250    	; 0xd92 <lcd_int32+0x148>
     c98:	9e 01       	movw	r18, r28
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	69 01       	movw	r12, r18
        sline[i++] = '.';
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     ca0:	2a e0       	ldi	r18, 0x0A	; 10
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 80 08 	call	0x1100	; 0x1100 <__divmodsi4>
     cac:	f6 2f       	mov	r31, r22
     cae:	2a 8b       	std	Y+18, r18	; 0x12
     cb0:	3b 8b       	std	Y+19, r19	; 0x13
     cb2:	4c 8b       	std	Y+20, r20	; 0x14
     cb4:	5d 8b       	std	Y+21, r21	; 0x15
     cb6:	6e 8b       	std	Y+22, r22	; 0x16
     cb8:	7f 8b       	std	Y+23, r23	; 0x17
     cba:	88 8f       	std	Y+24, r24	; 0x18
     cbc:	99 8f       	std	Y+25, r25	; 0x19
     cbe:	6a 89       	ldd	r22, Y+18	; 0x12
     cc0:	7b 89       	ldd	r23, Y+19	; 0x13
     cc2:	8c 89       	ldd	r24, Y+20	; 0x14
     cc4:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     cc6:	e1 e0       	ldi	r30, 0x01	; 1
     cc8:	e1 0f       	add	r30, r17
     cca:	d6 01       	movw	r26, r12
     ccc:	a1 0f       	add	r26, r17
     cce:	b1 1d       	adc	r27, r1
     cd0:	f0 5d       	subi	r31, 0xD0	; 208
     cd2:	fc 93       	st	X, r31
     cd4:	1e 2f       	mov	r17, r30
        }while(qr.quot);
     cd6:	61 15       	cp	r22, r1
     cd8:	71 05       	cpc	r23, r1
     cda:	81 05       	cpc	r24, r1
     cdc:	91 05       	cpc	r25, r1
     cde:	01 f7       	brne	.-64     	; 0xca0 <lcd_int32+0x56>

      // fill the whole field if a width was specified
      if (fieldwidth){
     ce0:	ff 20       	and	r15, r15
     ce2:	e1 f0       	breq	.+56     	; 0xd1c <lcd_int32+0xd2>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     ce4:	20 e3       	ldi	r18, 0x30	; 48
     ce6:	e1 10       	cpse	r14, r1
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <lcd_int32+0xa2>
     cea:	20 e2       	ldi	r18, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     cec:	ef 15       	cp	r30, r15
     cee:	b0 f4       	brcc	.+44     	; 0xd1c <lcd_int32+0xd2>
     cf0:	4e 2f       	mov	r20, r30
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	d6 01       	movw	r26, r12
     cf6:	a4 0f       	add	r26, r20
     cf8:	b5 1f       	adc	r27, r21
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	8c 0f       	add	r24, r28
     d00:	9d 1f       	adc	r25, r29
     d02:	48 0f       	add	r20, r24
     d04:	59 1f       	adc	r21, r25
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	8f 0d       	add	r24, r15
     d0a:	8e 1b       	sub	r24, r30
     d0c:	84 0f       	add	r24, r20
     d0e:	95 2f       	mov	r25, r21
     d10:	91 1d       	adc	r25, r1
     d12:	2d 93       	st	X+, r18
     d14:	a8 17       	cp	r26, r24
     d16:	b9 07       	cpc	r27, r25
     d18:	e1 f7       	brne	.-8      	; 0xd12 <lcd_int32+0xc8>
     d1a:	ef 2d       	mov	r30, r15
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     d1c:	00 23       	and	r16, r16
     d1e:	31 f0       	breq	.+12     	; 0xd2c <lcd_int32+0xe2>
     d20:	d6 01       	movw	r26, r12
     d22:	ae 0f       	add	r26, r30
     d24:	b1 1d       	adc	r27, r1
     d26:	8d e2       	ldi	r24, 0x2D	; 45
     d28:	8c 93       	st	X, r24
     d2a:	ef 5f       	subi	r30, 0xFF	; 255
     d2c:	e1 50       	subi	r30, 0x01	; 1
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	31 96       	adiw	r30, 0x01	; 1
     d32:	ec 0d       	add	r30, r12
     d34:	fd 1d       	adc	r31, r13
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d36:	91 e0       	ldi	r25, 0x01	; 1

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     d38:	82 91       	ld	r24, -Z
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d3a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d3c:	77 9b       	sbis	0x0e, 7	; 14
     d3e:	fe cf       	rjmp	.-4      	; 0xd3c <lcd_int32+0xf2>
  SPDR = byte;                        //send payload
     d40:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d42:	77 9b       	sbis	0x0e, 7	; 14
     d44:	fe cf       	rjmp	.-4      	; 0xd42 <lcd_int32+0xf8>
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d4a:	88 60       	ori	r24, 0x08	; 8
     d4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	__builtin_avr_delay_cycles(__ticks_dc);
     d5a:	a5 ed       	ldi	r26, 0xD5	; 213
     d5c:	aa 95       	dec	r26
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <lcd_int32+0x112>
     d60:	00 00       	nop
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     d62:	ce 16       	cp	r12, r30
     d64:	df 06       	cpc	r13, r31
     d66:	41 f7       	brne	.-48     	; 0xd38 <lcd_int32+0xee>

}
     d68:	69 96       	adiw	r28, 0x19	; 25
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	bf 90       	pop	r11
     d86:	af 90       	pop	r10
     d88:	9f 90       	pop	r9
     d8a:	8f 90       	pop	r8
     d8c:	7f 90       	pop	r7
     d8e:	6f 90       	pop	r6
     d90:	08 95       	ret
     d92:	de 01       	movw	r26, r28
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	6d 01       	movw	r12, r26
     d98:	4d 01       	movw	r8, r26
     d9a:	5d 01       	movw	r10, r26
     d9c:	bf ef       	ldi	r27, 0xFF	; 255
     d9e:	ab 1a       	sub	r10, r27
     da0:	bb 0a       	sbc	r11, r27
     da2:	66 24       	eor	r6, r6
     da4:	6a 94       	dec	r6
     da6:	61 0e       	add	r6, r17
     da8:	6a 0c       	add	r6, r10
     daa:	7b 2c       	mov	r7, r11
     dac:	71 1c       	adc	r7, r1
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <lcd_int32+0x16e>
     db0:	95 01       	movw	r18, r10
     db2:	2f 5f       	subi	r18, 0xFF	; 255
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	59 01       	movw	r10, r18
          qr = ldiv(qr.quot, 10);
     db8:	2a e0       	ldi	r18, 0x0A	; 10
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	0e 94 80 08 	call	0x1100	; 0x1100 <__divmodsi4>
     dc4:	e6 2f       	mov	r30, r22
     dc6:	2a 8b       	std	Y+18, r18	; 0x12
     dc8:	3b 8b       	std	Y+19, r19	; 0x13
     dca:	4c 8b       	std	Y+20, r20	; 0x14
     dcc:	5d 8b       	std	Y+21, r21	; 0x15
     dce:	6a 89       	ldd	r22, Y+18	; 0x12
     dd0:	7b 89       	ldd	r23, Y+19	; 0x13
     dd2:	8c 89       	ldd	r24, Y+20	; 0x14
     dd4:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     dd6:	e0 5d       	subi	r30, 0xD0	; 208
     dd8:	d4 01       	movw	r26, r8
     dda:	ec 93       	st	X, r30
     ddc:	45 01       	movw	r8, r10
        for (; decpos ; decpos--){
     dde:	a6 14       	cp	r10, r6
     de0:	b7 04       	cpc	r11, r7
     de2:	31 f7       	brne	.-52     	; 0xdb0 <lcd_int32+0x166>
        sline[i++] = '.';
     de4:	f6 01       	movw	r30, r12
     de6:	e1 0f       	add	r30, r17
     de8:	f1 1d       	adc	r31, r1
     dea:	2e e2       	ldi	r18, 0x2E	; 46
     dec:	20 83       	st	Z, r18
     dee:	1f 5f       	subi	r17, 0xFF	; 255
     df0:	57 cf       	rjmp	.-338    	; 0xca0 <lcd_int32+0x56>
        qr.quot = labs(qr.quot);
     df2:	90 95       	com	r25
     df4:	80 95       	com	r24
     df6:	70 95       	com	r23
     df8:	61 95       	neg	r22
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	8f 4f       	sbci	r24, 0xFF	; 255
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	49 cf       	rjmp	.-366    	; 0xc94 <lcd_int32+0x4a>

00000e02 <lcd_int16>:
     e02:	5f 92       	push	r5
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	61 97       	sbiw	r28, 0x11	; 17
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	4c 01       	movw	r8, r24
     e32:	56 2e       	mov	r5, r22
     e34:	14 2f       	mov	r17, r20
     e36:	9c 01       	movw	r18, r24
     e38:	97 ff       	sbrs	r25, 7
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <lcd_int16+0x42>
     e3c:	22 27       	eor	r18, r18
     e3e:	33 27       	eor	r19, r19
     e40:	28 1b       	sub	r18, r24
     e42:	39 0b       	sbc	r19, r25
     e44:	11 11       	cpse	r17, r1
     e46:	28 c0       	rjmp	.+80     	; 0xe98 <lcd_int16+0x96>
     e48:	ae 01       	movw	r20, r28
     e4a:	4f 5f       	subi	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	7a 01       	movw	r14, r20
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <lcd_int16+0x52>
     e52:	1a 2f       	mov	r17, r26
     e54:	6a e0       	ldi	r22, 0x0A	; 10
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	c9 01       	movw	r24, r18
     e5a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__divmodhi4>
     e5e:	46 2f       	mov	r20, r22
     e60:	24 2f       	mov	r18, r20
     e62:	37 2f       	mov	r19, r23
     e64:	a1 e0       	ldi	r26, 0x01	; 1
     e66:	a1 0f       	add	r26, r17
     e68:	f7 01       	movw	r30, r14
     e6a:	e1 0f       	add	r30, r17
     e6c:	f1 1d       	adc	r31, r1
     e6e:	80 5d       	subi	r24, 0xD0	; 208
     e70:	80 83       	st	Z, r24
     e72:	21 15       	cp	r18, r1
     e74:	31 05       	cpc	r19, r1
     e76:	69 f7       	brne	.-38     	; 0xe52 <lcd_int16+0x50>
     e78:	01 11       	cpse	r16, r1
     e7a:	37 c0       	rjmp	.+110    	; 0xeea <lcd_int16+0xe8>
     e7c:	97 fc       	sbrc	r9, 7
     e7e:	8e c0       	rjmp	.+284    	; 0xf9c <lcd_int16+0x19a>
     e80:	55 20       	and	r5, r5
     e82:	41 f0       	breq	.+16     	; 0xe94 <lcd_int16+0x92>
     e84:	8a 2f       	mov	r24, r26
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	25 2d       	mov	r18, r5
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e2       	ldi	r20, 0x20	; 32
     e8e:	a5 15       	cp	r26, r5
     e90:	08 f4       	brcc	.+2      	; 0xe94 <lcd_int16+0x92>
     e92:	79 c0       	rjmp	.+242    	; 0xf86 <lcd_int16+0x184>
     e94:	ea 2f       	mov	r30, r26
     e96:	38 c0       	rjmp	.+112    	; 0xf08 <lcd_int16+0x106>
     e98:	ce 01       	movw	r24, r28
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	7c 01       	movw	r14, r24
     e9e:	6c 01       	movw	r12, r24
     ea0:	3c 01       	movw	r6, r24
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	69 1a       	sub	r6, r25
     ea6:	79 0a       	sbc	r7, r25
     ea8:	aa 24       	eor	r10, r10
     eaa:	aa 94       	dec	r10
     eac:	a1 0e       	add	r10, r17
     eae:	a6 0c       	add	r10, r6
     eb0:	b7 2c       	mov	r11, r7
     eb2:	b1 1c       	adc	r11, r1
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <lcd_int16+0xbc>
     eb6:	a3 01       	movw	r20, r6
     eb8:	4f 5f       	subi	r20, 0xFF	; 255
     eba:	5f 4f       	sbci	r21, 0xFF	; 255
     ebc:	3a 01       	movw	r6, r20
     ebe:	6a e0       	ldi	r22, 0x0A	; 10
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	c9 01       	movw	r24, r18
     ec4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__divmodhi4>
     ec8:	46 2f       	mov	r20, r22
     eca:	24 2f       	mov	r18, r20
     ecc:	37 2f       	mov	r19, r23
     ece:	80 5d       	subi	r24, 0xD0	; 208
     ed0:	f6 01       	movw	r30, r12
     ed2:	80 83       	st	Z, r24
     ed4:	63 01       	movw	r12, r6
     ed6:	a6 14       	cp	r10, r6
     ed8:	b7 04       	cpc	r11, r7
     eda:	69 f7       	brne	.-38     	; 0xeb6 <lcd_int16+0xb4>
     edc:	f7 01       	movw	r30, r14
     ede:	e1 0f       	add	r30, r17
     ee0:	f1 1d       	adc	r31, r1
     ee2:	8e e2       	ldi	r24, 0x2E	; 46
     ee4:	80 83       	st	Z, r24
     ee6:	1f 5f       	subi	r17, 0xFF	; 255
     ee8:	b5 cf       	rjmp	.-150    	; 0xe54 <lcd_int16+0x52>
     eea:	09 2d       	mov	r16, r9
     eec:	00 1f       	adc	r16, r16
     eee:	00 27       	eor	r16, r16
     ef0:	00 1f       	adc	r16, r16
     ef2:	51 10       	cpse	r5, r1
     ef4:	3d c0       	rjmp	.+122    	; 0xf70 <lcd_int16+0x16e>
     ef6:	00 23       	and	r16, r16
     ef8:	69 f2       	breq	.-102    	; 0xe94 <lcd_int16+0x92>
     efa:	e1 e0       	ldi	r30, 0x01	; 1
     efc:	ea 0f       	add	r30, r26
     efe:	ae 0d       	add	r26, r14
     f00:	bf 2d       	mov	r27, r15
     f02:	b1 1d       	adc	r27, r1
     f04:	8d e2       	ldi	r24, 0x2D	; 45
     f06:	8c 93       	st	X, r24
     f08:	e1 50       	subi	r30, 0x01	; 1
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	31 96       	adiw	r30, 0x01	; 1
     f0e:	ee 0d       	add	r30, r14
     f10:	ff 1d       	adc	r31, r15
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	82 91       	ld	r24, -Z
     f16:	9f b9       	out	0x0f, r25	; 15
     f18:	77 9b       	sbis	0x0e, 7	; 14
     f1a:	fe cf       	rjmp	.-4      	; 0xf18 <lcd_int16+0x116>
     f1c:	8f b9       	out	0x0f, r24	; 15
     f1e:	77 9b       	sbis	0x0e, 7	; 14
     f20:	fe cf       	rjmp	.-4      	; 0xf1e <lcd_int16+0x11c>
     f22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f2c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f36:	45 ed       	ldi	r20, 0xD5	; 213
     f38:	4a 95       	dec	r20
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <lcd_int16+0x136>
     f3c:	00 00       	nop
     f3e:	ee 16       	cp	r14, r30
     f40:	ff 06       	cpc	r15, r31
     f42:	41 f7       	brne	.-48     	; 0xf14 <lcd_int16+0x112>
     f44:	61 96       	adiw	r28, 0x11	; 17
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	8f 90       	pop	r8
     f68:	7f 90       	pop	r7
     f6a:	6f 90       	pop	r6
     f6c:	5f 90       	pop	r5
     f6e:	08 95       	ret
     f70:	8a 2f       	mov	r24, r26
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	e5 2d       	mov	r30, r5
     f76:	e0 1b       	sub	r30, r16
     f78:	ff 0b       	sbc	r31, r31
     f7a:	9f 01       	movw	r18, r30
     f7c:	40 e3       	ldi	r20, 0x30	; 48
     f7e:	8e 17       	cp	r24, r30
     f80:	9f 07       	cpc	r25, r31
     f82:	0c f0       	brlt	.+2      	; 0xf86 <lcd_int16+0x184>
     f84:	b8 cf       	rjmp	.-144    	; 0xef6 <lcd_int16+0xf4>
     f86:	af 5f       	subi	r26, 0xFF	; 255
     f88:	8e 0d       	add	r24, r14
     f8a:	9f 1d       	adc	r25, r15
     f8c:	fc 01       	movw	r30, r24
     f8e:	40 83       	st	Z, r20
     f90:	8a 2f       	mov	r24, r26
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	82 17       	cp	r24, r18
     f96:	93 07       	cpc	r25, r19
     f98:	b4 f3       	brlt	.-20     	; 0xf86 <lcd_int16+0x184>
     f9a:	ad cf       	rjmp	.-166    	; 0xef6 <lcd_int16+0xf4>
     f9c:	e2 e0       	ldi	r30, 0x02	; 2
     f9e:	e1 0f       	add	r30, r17
     fa0:	ae 0d       	add	r26, r14
     fa2:	bf 2d       	mov	r27, r15
     fa4:	b1 1d       	adc	r27, r1
     fa6:	8d e2       	ldi	r24, 0x2D	; 45
     fa8:	8c 93       	st	X, r24
     faa:	55 20       	and	r5, r5
     fac:	09 f4       	brne	.+2      	; 0xfb0 <lcd_int16+0x1ae>
     fae:	ac cf       	rjmp	.-168    	; 0xf08 <lcd_int16+0x106>
     fb0:	8e 2f       	mov	r24, r30
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	25 2d       	mov	r18, r5
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	ae 2f       	mov	r26, r30
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	82 17       	cp	r24, r18
     fbe:	93 07       	cpc	r25, r19
     fc0:	14 f3       	brlt	.-60     	; 0xf86 <lcd_int16+0x184>
     fc2:	a2 cf       	rjmp	.-188    	; 0xf08 <lcd_int16+0x106>

00000fc4 <main>:
}
//***********************************************************************************
uint8_t main() {

    //set port bits 4-7 B as outputs
    DDRB = 0xF7;
     fc4:	87 ef       	ldi	r24, 0xF7	; 247
     fc6:	87 bb       	out	0x17, r24	; 23
    //Set PC0 to output
    DDRC = (1<<PC0); 
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	84 bb       	out	0x14, r24	; 20
        
    DDRE = (1<<PE3);
     fcc:	88 e0       	ldi	r24, 0x08	; 8
     fce:	82 b9       	out	0x02, r24	; 2
    PORTE = (1<<PE3);
     fd0:	83 b9       	out	0x03, r24	; 3
    DDRE  |= (1<<PE6);                //Set SH/LD_N low to load in data
     fd2:	16 9a       	sbi	0x02, 6	; 2
    DDRD  |= (1<<PD2);                //Turn on REGCLK
     fd4:	8a 9a       	sbi	0x11, 2	; 17
    SPCR  |= (1<<SPE) | (1<<MSTR);    //enable SPI, master mode 
     fd6:	8d b1       	in	r24, 0x0d	; 13
     fd8:	80 65       	ori	r24, 0x50	; 80
     fda:	8d b9       	out	0x0d, r24	; 13
    SPSR  |= (1<<SPI2X);              // double speed operation
     fdc:	70 9a       	sbi	0x0e, 0	; 14
    TIMSK |= (1<<TOIE0);             //enable overflow interrupt
     fde:	87 b7       	in	r24, 0x37	; 55
     fe0:	81 60       	ori	r24, 0x01	; 1
     fe2:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= (1<<CS00) | (1<<CS02);  //normal mode, 128 prescale
     fe4:	83 b7       	in	r24, 0x33	; 51
     fe6:	85 60       	ori	r24, 0x05	; 5
     fe8:	83 bf       	out	0x33, r24	; 51
    ASSR |= (1<<AS0);                //Use external oscillator
     fea:	80 b7       	in	r24, 0x30	; 48
     fec:	88 60       	ori	r24, 0x08	; 8
     fee:	80 bf       	out	0x30, r24	; 48
    TCCR1A |= (1<<WGM11) | (1<<WGM10);  //Set to fast PWM, 64 prescale 
     ff0:	8f b5       	in	r24, 0x2f	; 47
     ff2:	83 60       	ori	r24, 0x03	; 3
     ff4:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1<<WGM12) | (1<<CS10) | (1<<CS11);              
     ff6:	8e b5       	in	r24, 0x2e	; 46
     ff8:	8b 60       	ori	r24, 0x0B	; 11
     ffa:	8e bd       	out	0x2e, r24	; 46
    TCCR1C = 0x00;                      //No force compare
     ffc:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    TCCR2 |= (1<<WGM20) |(1<<WGM21) | (1<<CS20) | (1<<COM21);  //Set to fast PWM, 1024 prescale
    1000:	85 b5       	in	r24, 0x25	; 37
    1002:	89 66       	ori	r24, 0x69	; 105
    1004:	85 bd       	out	0x25, r24	; 37
    TCCR3A |= (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31) | (1<<WGM30);  //Set to fast PWM, no prescale 
    1006:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    100a:	83 6c       	ori	r24, 0xC3	; 195
    100c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    TCCR3B |= (1<<WGM32) | (1<<CS30);              
    1010:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1014:	89 60       	ori	r24, 0x09	; 9
    1016:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    TCCR3C = 0x00;                      //No force compare
    101a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
    OCR3A = 9727; 
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	95 e2       	ldi	r25, 0x25	; 37
    1022:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1026:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    ADMUX |= (1<<REFS1) | (1<<REFS0);   //Use the internal 2.56V as AREF and left adjust
    102a:	87 b1       	in	r24, 0x07	; 7
    102c:	80 6c       	ori	r24, 0xC0	; 192
    102e:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS0) | (1<<ADPS0);   //Enable ADC and ADC interrupts
    1030:	86 b1       	in	r24, 0x06	; 6
    1032:	8d 6c       	ori	r24, 0xCD	; 205
    1034:	86 b9       	out	0x06, r24	; 6
    timer0_init();
    timer1_init();
    timer2_init();
    timer3_init();
    adc_init();
    lcd_init();
    1036:	0e 94 63 05 	call	0xac6	; 0xac6 <lcd_init>

    //Enable the interrupts
    sei();
    103a:	78 94       	sei
        int8_t SPDR_val;
        int8_t SPDR_adj;
        
        //alarm_time = 5;
        //make PORTA an input port with pullups 
        DDRA = 0xFC;
    103c:	4c ef       	ldi	r20, 0xFC	; 252
    103e:	f4 2e       	mov	r15, r20
        PORTA = 0xFF;
    1040:	1f ef       	ldi	r17, 0xFF	; 255
        DDRA = 0xFC;
    1042:	fa ba       	out	0x1a, r15	; 26
        PORTA = 0xFF;
    1044:	1b bb       	out	0x1b, r17	; 27

        //enable tristate buffer for pushbutton switches
        uint8_t temp = PORTB;
    1046:	08 b3       	in	r16, 0x18	; 24
        PORTB |= 0x70;
    1048:	88 b3       	in	r24, 0x18	; 24
    104a:	80 67       	ori	r24, 0x70	; 112
    104c:	88 bb       	out	0x18, r24	; 24


        //now check each button and pass that information to mode_select
        for(int i = 0; i < 4; i++){
    104e:	d0 e0       	ldi	r29, 0x00	; 0
    1050:	c0 e0       	ldi	r28, 0x00	; 0
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
    1052:	fe 01       	movw	r30, r28
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	e7 5b       	subi	r30, 0xB7	; 183
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	29 b3       	in	r18, 0x19	; 25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	90 6e       	ori	r25, 0xE0	; 224
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	0c 2e       	mov	r0, r28
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <main+0xae>
    106e:	35 95       	asr	r19
    1070:	27 95       	ror	r18
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <main+0xaa>
    1076:	21 70       	andi	r18, 0x01	; 1
    1078:	33 27       	eor	r19, r19
    107a:	82 2b       	or	r24, r18
    107c:	93 2b       	or	r25, r19
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    if (state[button] == 0xF000) return 1;
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	81 15       	cp	r24, r1
    1088:	90 4f       	sbci	r25, 0xF0	; 240
    108a:	e1 f0       	breq	.+56     	; 0x10c4 <main+0x100>
        for(int i = 0; i < 4; i++){
    108c:	21 96       	adiw	r28, 0x01	; 1
    108e:	c4 30       	cpi	r28, 0x04	; 4
    1090:	d1 05       	cpc	r29, r1
    1092:	f9 f6       	brne	.-66     	; 0x1052 <main+0x8e>
               mode_select(i, current_mode, &alarm_clock);
            }
        }

        //disable tristate buffer for pushbutton switches
        PORTB = temp;
    1094:	08 bb       	out	0x18, r16	; 24

        //break up the disp_value to 4, BCD digits in the array: call (segsum)
        DDRA = 0xFF;
    1096:	1a bb       	out	0x1a, r17	; 26

        //store values of spi_action and encoder_adjuster
        SPDR_val = spi_action(current_mode);
    1098:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_mode>
    109c:	0e 94 76 01 	call	0x2ec	; 0x2ec <spi_action>
        SPDR_adj = encoder_adjuster(SPDR_val);
    10a0:	0e 94 89 01 	call	0x312	; 0x312 <encoder_adjuster>
        
        
        mode_action(current_mode, SPDR_adj, &clock, &alarm_clock);
    10a4:	24 e4       	ldi	r18, 0x44	; 68
    10a6:	31 e0       	ldi	r19, 0x01	; 1
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	51 e0       	ldi	r21, 0x01	; 1
    10ac:	68 2f       	mov	r22, r24
    10ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_mode>
    10b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_mode+0x1>
    10b6:	0e 94 b9 02 	call	0x572	; 0x572 <mode_action>

        //send data out to display
       // if (current_mode == SET_CLOCK) 
            segsum(&clock);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	0e 94 2a 01 	call	0x254	; 0x254 <segsum>
    while(1){
    10c2:	bf cf       	rjmp	.-130    	; 0x1042 <main+0x7e>
               mode_select(i, current_mode, &alarm_clock);
    10c4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <current_mode>
    10c8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <current_mode+0x1>
    10cc:	44 e4       	ldi	r20, 0x44	; 68
    10ce:	51 e0       	ldi	r21, 0x01	; 1
    10d0:	ce 01       	movw	r24, r28
    10d2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mode_select>
    10d6:	da cf       	rjmp	.-76     	; 0x108c <main+0xc8>

000010d8 <__divmodhi4>:
    10d8:	97 fb       	bst	r25, 7
    10da:	07 2e       	mov	r0, r23
    10dc:	16 f4       	brtc	.+4      	; 0x10e2 <__divmodhi4+0xa>
    10de:	00 94       	com	r0
    10e0:	07 d0       	rcall	.+14     	; 0x10f0 <__divmodhi4_neg1>
    10e2:	77 fd       	sbrc	r23, 7
    10e4:	09 d0       	rcall	.+18     	; 0x10f8 <__divmodhi4_neg2>
    10e6:	0e 94 9f 08 	call	0x113e	; 0x113e <__udivmodhi4>
    10ea:	07 fc       	sbrc	r0, 7
    10ec:	05 d0       	rcall	.+10     	; 0x10f8 <__divmodhi4_neg2>
    10ee:	3e f4       	brtc	.+14     	; 0x10fe <__divmodhi4_exit>

000010f0 <__divmodhi4_neg1>:
    10f0:	90 95       	com	r25
    10f2:	81 95       	neg	r24
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <__divmodhi4_neg2>:
    10f8:	70 95       	com	r23
    10fa:	61 95       	neg	r22
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255

000010fe <__divmodhi4_exit>:
    10fe:	08 95       	ret

00001100 <__divmodsi4>:
    1100:	05 2e       	mov	r0, r21
    1102:	97 fb       	bst	r25, 7
    1104:	1e f4       	brtc	.+6      	; 0x110c <__divmodsi4+0xc>
    1106:	00 94       	com	r0
    1108:	0e 94 97 08 	call	0x112e	; 0x112e <__negsi2>
    110c:	57 fd       	sbrc	r21, 7
    110e:	07 d0       	rcall	.+14     	; 0x111e <__divmodsi4_neg2>
    1110:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodsi4>
    1114:	07 fc       	sbrc	r0, 7
    1116:	03 d0       	rcall	.+6      	; 0x111e <__divmodsi4_neg2>
    1118:	4e f4       	brtc	.+18     	; 0x112c <__divmodsi4_exit>
    111a:	0c 94 97 08 	jmp	0x112e	; 0x112e <__negsi2>

0000111e <__divmodsi4_neg2>:
    111e:	50 95       	com	r21
    1120:	40 95       	com	r20
    1122:	30 95       	com	r19
    1124:	21 95       	neg	r18
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	4f 4f       	sbci	r20, 0xFF	; 255
    112a:	5f 4f       	sbci	r21, 0xFF	; 255

0000112c <__divmodsi4_exit>:
    112c:	08 95       	ret

0000112e <__negsi2>:
    112e:	90 95       	com	r25
    1130:	80 95       	com	r24
    1132:	70 95       	com	r23
    1134:	61 95       	neg	r22
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	8f 4f       	sbci	r24, 0xFF	; 255
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	08 95       	ret

0000113e <__udivmodhi4>:
    113e:	aa 1b       	sub	r26, r26
    1140:	bb 1b       	sub	r27, r27
    1142:	51 e1       	ldi	r21, 0x11	; 17
    1144:	07 c0       	rjmp	.+14     	; 0x1154 <__udivmodhi4_ep>

00001146 <__udivmodhi4_loop>:
    1146:	aa 1f       	adc	r26, r26
    1148:	bb 1f       	adc	r27, r27
    114a:	a6 17       	cp	r26, r22
    114c:	b7 07       	cpc	r27, r23
    114e:	10 f0       	brcs	.+4      	; 0x1154 <__udivmodhi4_ep>
    1150:	a6 1b       	sub	r26, r22
    1152:	b7 0b       	sbc	r27, r23

00001154 <__udivmodhi4_ep>:
    1154:	88 1f       	adc	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	5a 95       	dec	r21
    115a:	a9 f7       	brne	.-22     	; 0x1146 <__udivmodhi4_loop>
    115c:	80 95       	com	r24
    115e:	90 95       	com	r25
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	08 95       	ret

00001166 <__udivmodsi4>:
    1166:	a1 e2       	ldi	r26, 0x21	; 33
    1168:	1a 2e       	mov	r1, r26
    116a:	aa 1b       	sub	r26, r26
    116c:	bb 1b       	sub	r27, r27
    116e:	fd 01       	movw	r30, r26
    1170:	0d c0       	rjmp	.+26     	; 0x118c <__udivmodsi4_ep>

00001172 <__udivmodsi4_loop>:
    1172:	aa 1f       	adc	r26, r26
    1174:	bb 1f       	adc	r27, r27
    1176:	ee 1f       	adc	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	a2 17       	cp	r26, r18
    117c:	b3 07       	cpc	r27, r19
    117e:	e4 07       	cpc	r30, r20
    1180:	f5 07       	cpc	r31, r21
    1182:	20 f0       	brcs	.+8      	; 0x118c <__udivmodsi4_ep>
    1184:	a2 1b       	sub	r26, r18
    1186:	b3 0b       	sbc	r27, r19
    1188:	e4 0b       	sbc	r30, r20
    118a:	f5 0b       	sbc	r31, r21

0000118c <__udivmodsi4_ep>:
    118c:	66 1f       	adc	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	1a 94       	dec	r1
    1196:	69 f7       	brne	.-38     	; 0x1172 <__udivmodsi4_loop>
    1198:	60 95       	com	r22
    119a:	70 95       	com	r23
    119c:	80 95       	com	r24
    119e:	90 95       	com	r25
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	bd 01       	movw	r22, r26
    11a6:	cf 01       	movw	r24, r30
    11a8:	08 95       	ret

000011aa <_exit>:
    11aa:	f8 94       	cli

000011ac <__stop_program>:
    11ac:	ff cf       	rjmp	.-2      	; 0x11ac <__stop_program>
